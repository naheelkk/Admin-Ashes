[^]+)/,"$1-webkit-$2-$3$1-moz-"+(108==z(e,t+3)?"$3":"$2-$3"))+e;case 115:return~I(e,"stretch")?Ce(O(e,"stretch","fill-available"),t)+e:e}}return e}function Se(e,t,r,n){if(e.length>-1&&!e.return)switch(e.type){case N:return void(e.return=Ce(e.value,e.length));case P:if(e.length)return function(e,t){return e.map(t).join("")}(e.props,(function(t){switch(L(t,/(::plac\w+|:read-\w+)/)){case":read-only":case":read-write":return q([J(e,{props:[O(t,/:(read-\w+)/,":-moz-$1")]})],n);case"::placeholder":return q([J(e,{props:[O(t,/:(plac\w+)/,":-webkit-input-$1")]}),J(e,{props:[O(t,/:(plac\w+)/,":-moz-$1")]}),J(e,{props:[O(t,/:(plac\w+)/,"-ms-input-$1")]})],n)}return""}))}}const xe=e=>{(function(e){switch(e.type){case"@container":case"@media":case"@supports":case A:return!0}return!1})(e)&&Array.isArray(e.children)&&e.children.sort(((e,t)=>e.props[0]>t.props[0]?1:-1))};const Ee=/,( *[^ &])/g;function _e(e,t,r){let n=t;return r.length>0&&(n=r.reduceRight(((e,t)=>{return`${r=t,"&"+E(r.replace(Ee,",&$1"))} { ${e} }`;var r}),t)),`${e}{${n}}`}function Te(e){const{className:t,media:r,layer:n,selectors:o,support:a,property:i,rtlClassName:l,rtlProperty:s,rtlValue:c,value:u,container:d}=e;let f=_e(`.${t}`,Array.isArray(u)?`${u.map((e=>`${x(i)}: ${e}`)).join(";")};`:`${x(i)}: ${u};`,o);return s&&l&&(f+=_e(`.${l}`,Array.isArray(c)?`${c.map((e=>`${x(s)}: ${e}`)).join(";")};`:`${x(s)}: ${c};`,o)),r&&(f=`@media ${r} { ${f} }`),n&&(f=`@layer ${n} { ${f} }`),a&&(f=`@supports ${a} { ${f} }`),d&&(f=`@container ${d} { ${f} }`),function(e,t){const r=[];return q(he(e),ye([ke,xe,Se,W,we((e=>r.push(e)))])),r}(f)}function Be(e){let t="";for(const r in e){const n=e[r];"string"!=typeof n&&"number"!=typeof n||(t+=x(r)+":"+n+";")}return t}function Pe(e){let t="";for(const r in e)t+=`${r}{${Be(e[r])}}`;return t}function Ne(e,t){const r=[];return q(he(`@keyframes ${e} {${t}}`),ye([W,Se,we((e=>r.push(e)))])),r}function Ae(e,t){return 0===e.length?t:`${e} and ${t}`}function Fe(e){return"@media"===e.substr(0,6)}function De(e){return"@layer"===e.substr(0,6)}const Me=/^(:|\[|>|&)/;function Re(e){return Me.test(e)}function Le(e){return"@supports"===e.substr(0,9)}function Oe(e){return"@container"===e.substring(0,10)}const Ie={"us-w":"w","us-v":"i",nk:"l",si:"v",cu:"f",ve:"h",ti:"a"};function ze(e,t,r,n,o){if(r)return"m";if(t||n)return"t";if(o)return"c";if(e.length>0){const t=e[0].trim();if(58===t.charCodeAt(0))return Ie[t.slice(4,8)]||Ie[t.slice(3,5)]||"d"}return"d"}function je({container:e,media:t,layer:r,property:n,selector:a,support:i,value:l}){const s=(0,o.Z)(a+e+t+r+i+n+l.trim());return y.Hf+s}function He(e,t,r,n,a){const i=e+t+r+n+a,l=(0,o.Z)(i),s=l.charCodeAt(0);return s>=48&&s<=57?String.fromCharCode(s+17)+l.slice(1):l}function Ze(e){return e.replace(/>\s+/g,">")}function Ue(e,t){const r=JSON.stringify(t,null,2),n=["@griffel/react: A rule was not resolved to CSS properly. Please check your `makeStyles` or `makeResetStyles` calls for following:"," ".repeat(2)+"makeStyles({"," ".repeat(4)+"[slot]: {"," ".repeat(6)+`"${e}": ${r.split("\n").map(((e,t)=>" ".repeat(0===t?0:6)+e)).join("\n")}`," ".repeat(4)+"}"," ".repeat(2)+"})",""];-1===e.indexOf("&")?(n.push("It looks that you're are using a nested selector, but it is missing an ampersand placeholder where the generated class name should be injected."),n.push(`Try to update a property to include it i.e "${e}" => "&${e}".`)):(n.push(""),n.push("If it's not obvious what triggers a problem, please report an issue at https://github.com/microsoft/griffel/issues")),n.join("\n")}function qe(e,t){[`@griffel/react: You are using unsupported shorthand CSS property "${e}". Please check your "makeStyles" calls, there *should not* be following:`," ".repeat(2)+"makeStyles({"," ".repeat(4)+`[slot]: { ${e}: "${t}" }`," ".repeat(2)+"})","","Learn why CSS shorthands are not supported: https://aka.ms/griffel-css-shorthands"].join("\n")}function We(e,t,r,n){e[t]=n?[r,n]:r}function Ve(e,t){return t?[e,t]:e}function Ge(e,t,r,n,o){var a;let i;"m"===t&&o&&(i={m:o}),null!==(a=e[t])&&void 0!==a||(e[t]=[]),r&&e[t].push(Ve(r,i)),n&&e[t].push(Veated IdRef exprs = 1;
}

// A reference to an expression id.
message IdRef {
  // The expression id.
  int32 id = 1;
}
