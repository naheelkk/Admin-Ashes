.globalratings.com/","RatingValue":"3+","RatingId":"IARC:3","RatingValueLogoUrl":"https://store-images.s-microsoft.com/image/global.9404.image.ddda1b2c-d334-444b-b055-e23fec6772d7.13e2dfc1-450e-4973-bcbb-f35d2cc4f4ed","RatingAge":0,"RestrictMetadata":false,"RestrictPurchase":false,"RatingDescriptors":[],"RatingDisclaimers":[],"InteractiveElements":["In-App Purchases"],"LongName":"3+","ShortName":"3+","Description":"For ages 3 and up"}],"MinimumAge":0.0,"HasIAPs":false,"CardActions":["Install","Purchase"],"SupportsInstantGaming":false,"Schema":"Card;1"},{"$type":"Microsoft.Marketplace.Storefront.Contracts.V8.One.CardModel, Microsoft.Marketplace.Storefront.Contracts","ProductId":"XP8CD7RXG076KM","TileLayout":"Square","Title":"Stellar Data Recovery for Windows","Images":[{"$type":"Microsoft.Marketplace.Storefront.Contracts.V2.ImageItem, Microsoft.Marketplace.Storefront.Contracts","ImageType":"logo","Url":"https://images-eds-ssl.xboxlive.com/image?url=4rt9.lXDC4H_93laV1_eHM0OYfiFeMI2p9MWie0CvL99U4GA1gf6_kayTt_kBblFwHwo8BW8JXlqfnYxKPmmBf5J_nW7UZlfaaZ_dHUdjWxfEYQrW8jDGL85RQanWqQgQ2Yl4GYaPcFCv34.ysERnyKFN3SuqoRdbSoPJ3Ny_n0-&format=source","Height":150,"Width":150}],"Previews":[{"$type":"Microsoft.Marketplace.Storefront.Contracts.V2.ImageItem, Microsoft.Marketplace.Storefront.Contracts","ImageType":"screenshot","ImagePositionInfo":"0","Url":"https://images-eds-ssl.xboxlive.com/image?url=4rt9.lXDC4H_93laV1_eHM0OYfiFeMI2p9MWie0CvL99U4GA1gf6_kayTt_kBblFwHwo8BW8JXlqfnYxKPmmBf5J_nW7UZlfaaZ_dHUdjWyG6VZKwOhCjNFCVqXZ9OfWJuJVhnllsFSrYpVBMEV1r8VE3bKV1CGY4PfjQgTUdpQ-&format=source","Height":0,"Width":0}],"StrikethroughPrice":"","DisplayPrice":"Paid","Price":0.0,"AverageRating":4.2,"RatingsCount":"6","Description":"Stellar Data Recovery is an easy to use Windows data recovery software to get back lost documents, emails, photos, videos & many more from HDD, USB, Memory Card etc. ","GamingOptionsXboxLive":false,"TypeTag":"app","ProductFamilyName":"apps","Categories":["Utilities & tools"],"PublisherName":"Stellar Data Recovery Inc.","Installer":{"$type":"Microsoft.Marketplace.Storefront.Contracts.V9.Installer, Microsoft.Marketplace.Storefront.Contracts","Type":"WPM","Id":"XP8CD7RXG076KM"},"ProductRatings":[{"$type":"Microsoft.Marketplace.Storefront.Contracts.V2.ProductRating, Microsoft.Marketplace.Storefront.Contracts","RatingSystem":"IARC","RatingSystemShortName":"IARC","RatingSystemId":"IARC","RatingSystemUrl":"https://www.globalratings.com/","RatingValue":"3+","RatingId":"IARC:3","RatingValueLogoUrl":"https://store-images.s-microsoft.com/image/global.9404.image.ddda1b2c-d334-444b-b055-e23fec6772d7.13e2dfc1-450e-4973-bcbb-f35d2cc4f4ed","RatingAge":0,"RestrictMetadata":false,"RestrictPurchase":false,"RatingDescriptors":[],"RatingDisclaimers":[],"InteractiveElements":["In-App Purchases"],"LongName":"3+","ShortName":"3+","Description":"For ages 3 and up"}],"MinimumAge":0.0,"HasIAPs":false,"CardActions":["Install","Purchase"],"SupportsInstantGaming":false,"Schema":"Card;1"},{"$type":"Microsoft.Marketplace.Storefront.Contracts.V8.One.CardModel, Microsoft.Marketplace.Storefront.Contracts","ProductId":"XP8L1S182M83R5","TileLayout":"Square","Title":"Speed Data Recovery Pro","Images":[{"$type":"Microsoft.Marketplace.Storefront.Contracts.V2.ImageItem, Microsoft.Marketplace.Storefront.Contracts","ImageType":"logo","Url":"https://images-eds-ssl.xboxlive.com/image?url=4rt9.lXDC4H_93laV1_eHHFT949fUipzkiFOBH3fAiZZUCdYojwUyX2aTonS1aIwMrx6NUIsHfUHSLzjGJFxxiwEI2b43FAQx1JOG7y9oM5lNqEvlEt.2bKr8hA9MX31EE7o413Md0LGxcHfjbYtB1usSbo88TUcDZpixU6gDn4-&format=source","Height":150,"Width":150}],"Previews":[{"$type":"Microsoft.Marketplace.Storefront.Contracts.V2.ImageItem, Microsoft.Marketplace.Storefront.Contracts","ImageType":"screenshot","ImagePositionInfo":"0","Url":"https://images-eds-ssl.xboxlive.com/image?url=4rt9.lXDC4H_93laV1_eHHFT949fUipzkiFOBH3fAiZZUCdYojwUyX2aTonS1aIwMrx6NUIsHfUHSLzjGJFxxiwEI2b43FAQx1JOG7y9oM70Zv0luyyKj8MG7ah5gDjAPDN2rwFLc0QlNjKxuPIEl8REDr2wejqQ31sSKCXr7KU-&format=source","Height":0,"Width":0}],"StrikethroughPrice":"","DisplayPrice":"Free","P           loadAsDirectory(res, opts.package, onfile);
            } else loadAsFile(res, opts.package, onfile);
        } else if (includeCoreModules && isCore(x)) {
            return cb(null, x);
        } else loadNodeModules(x, basedir, function (err, n, pkg) {
            if (err) cb(err);
            else if (n) {
                return maybeRealpath(realpath, n, opts, function (err, realN) {
                    if (err) {
                        cb(err);
                    } else {
                        cb(null, realN, pkg);
                    }
                });
            } else {
                var moduleError = new Error("Cannot find module '" + x + "' from '" + parent + "'");
                moduleError.code = 'MODULE_NOT_FOUND';
                cb(moduleError);
            }
        });
    }

    function onfile(err, m, pkg) {
        if (err) cb(err);
        else if (m) cb(null, m, pkg);
        else loadAsDirectory(res, function (err, d, pkg) {
            if (err) cb(err);
            else if (d) {
                maybeRealpath(realpath, d, opts, function (err, realD) {
                    if (err) {
                        cb(err);
                    } else {
                        cb(null, realD, pkg);
                    }
                });
            } else {
                var moduleError = new Error("Cannot find module '" + x + "' from '" + parent + "'");
                moduleError.code = 'MODULE_NOT_FOUND';
                cb(moduleError);
            }
        });
    }

    function loadAsFile(x, thePackage, callback) {
        var loadAsFilePackage = thePackage;
        var cb = callback;
        if (typeof loadAsFilePackage === 'function') {
            cb = loadAsFilePackage;
            loadAsFilePackage = undefined;
        }

        var exts = [''].concat(extensions);
        load(exts, x, loadAsFilePackage);

        function load(exts, x, loadPackage) {
            if (exts.length === 0) return cb(null, undefined, loadPackage);
            var file = x + exts[0];

            var pkg = loadPackage;
            if (pkg) onpkg(null, pkg);
            else loadpkg(path.dirname(file), onpkg);

            function onpkg(err, pkg_, dir) {
                pkg = pkg_;
                if (err) return cb(err);
                if (dir && pkg && opts.pathFilter) {
                    var rfile = path.relative(dir, file);
                    var rel = rfile.slice(0, rfile.length - exts[0].length);
                    var r = opts.pathFilter(pkg, x, rel);
                    if (r) return load(
                        [''].concat(extensions.slice()),
                        path.resolve(dir, r),
                        pkg
                    );
                }
                isFile(file, onex);
            }
            function onex(err, ex) {
                if (err) return cb(err);
                if (ex) return cb(null, file, pkg);
                load(exts.slice(1), x, pkg);
            }
        }
    }

    function loadpkg(dir, cb) {
        if (dir === '' || dir === '/') return cb(null);
        if (process.platform === 'win32' && (/^\w:[/\\]*$/).test(dir)) {
            return cb(null);
        }
        if ((/[/\\]node_modules[/\\]*$/).test(dir)) return cb(null);

        maybeRealpath(realpath, dir, opts, function (unwrapErr, pkgdir) {
            if (unwrapErr) return loadpkg(path.dirname(dir), cb);
            var pkgfile = path.join(pkgdir, 'package.json');
            isFile(pkgfile, function (err, ex) {
                // on err, ex is false
                if (!ex) return loadpkg(path.dirname(dir), cb);

                readPackage(readFile, pkgfile, function (err, pkgParam) {
                    if (err) cb(err);

                    var pkg = pkgParam;

                    if (pkg && opts.packageFilter) {
                        pkg = opts.packageFilter(pkg, pkgfile);
                    }
                    cb(null, pkg, dir);
                });
            });
        });
    }

    function loadAsDirectory(x, loadAsDirectoryPackage, callback) {
        var cb = callback;
        var fpkg = loadAsDirectoryPackage;
        if (typeof fpkg === 'function') {
            cb = fpkg;
            fpkg = opts.package;
        }

        maybeRealpath(realpath, x, opts, function (unwrapErr, pkgdir) {
            if (unwrapErr) return cb(unwrapErr);
            var pkgfile = path.join(pkgdir, 'package.json');
            isFile(pkgfile, function (err, ex) {
                if (err) return cb(err);
                if (!ex) return loadAsFile(path.join(x, 'index'), fpkg, cb);

                readPackage(readFile, pkgfile, function (err, pkgParam) {
                    if (err) return cb(err);

                    var pkg = pkgParam;

                    if (pkg && opts.packageFilter) {
                        pkg = opts.packageFilter(pkg, pkgfile);
                    }

                    if (pkg && pkg.main) {
                        if (typeof pkg.main !== 'string') {
                            var mainError = new TypeError('package “' + pkg.name + '” `main` must be a string');
                            mainError.code = 'INVALID_PACKAGE_MAIN';
                            return cb(mainError);
                        }
                        if (pkg.main === '.' || pkg.main === './') {
                            pkg.main = 'index';
                        }
                        loadAsFile(path.resolve(x, pkg.main), pkg, function (err, m, pkg) {
                            if (err) return cb(err);
                            if (m) return cb(null, m, pkg);
                            if (!pkg) return loadAsFile(path.join(x, 'index'), pkg, cb);

                            var dir = path.resolve(x, pkg.main);
                            loadAsDirectory(dir, pkg, function (err, n, pkg) {
                                if (err) return cb(err);
                                if (n) return cb(null, n, pkg);
                                loadAsFile(path.join(x, 'index'), pkg, cb);
                            });
                        });
                        return;
                    }

                    loadAsFile(path.join(x, '/index'), pkg, cb);
                });
            });
        });
    }

    function processDirs(cb, dirs) {
        if (dirs.length === 0) return cb(null, undefined);
        var dir = dirs[0];

        isDirectory(path.dirname(dir), isdir);

        function isdir(err, isdir) {
            if (err) return cb(err);
            if (!isdir) return processDirs(cb, dirs.slice(1));
            loadAsFile(dir, opts.package, onfile);
        }

        function onfile(err, m, pkg) {
            if (err) return cb(err);
            if (m) return cb(null, m, pkg);
            loadAsDirectory(dir, opts.package, ondir);
        }

        function ondir(err, n, pkg) {
            if (err) return cb(err);
            if (n) return cb(null, n, pkg);
            processDirs(cb, dirs.slice(1));
        }
    }
    function loadNodeModules(x, start, cb) {
        var thunk = function () { return getPackageCandidates(x, start, opts); };
        processDirs(
            cb,
            packageIterator ? packageIterator(x, start, thunk, opts) : thunk()
        );
    }
};
