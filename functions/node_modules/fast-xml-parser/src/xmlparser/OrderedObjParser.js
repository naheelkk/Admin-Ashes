'use strict';
///@ts-check

const util = require('../util');
const xmlNode = require('./xmlNode');
const readDocType = require("./DocTypeReader");
const toNumber = require("strnum");

// const regx =
//   '<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)'
//   .replace(/NAME/g, util.nameRegexp);

//const tagsRegx = new RegExp("<(\\/?[\\w:\\-\._]+)([^>]*)>(\\s*"+cdataRegx+")*([^<]+)?","g");
//const tagsRegx = new RegExp("<(\\/?)((\\w*:)?([\\w:\\-\._]+))([^>]*)>([^<]*)("+cdataRegx+"([^<]*))*([^<]+)?","g");

class OrderedObjParser{
  constructor(options){
    this.options = options;
    this.currentNode = null;
    this.tagsNodeStack = [];
    this.docTypeEntities = {};
    this.lastEntities = {
      "apos" : { regex: /&(apos|#39|#x27);/g, val : "'"},
      "gt" : { regex: /&(gt|#62|#x3E);/g, val : ">"},
      "lt" : { regex: /&(lt|#60|#x3C);/g, val : "<"},
      "quot" : { regex: /&(quot|#34|#x22);/g, val : "\""},
    };
    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : "&"};
    this.htmlEntities = {
      "space": { regex: /&(nbsp|#160);/g, val: " " },
      // "lt" : { regex: /&(lt|#60);/g, val: "<" },
      // "gt" : { regex: /&(gt|#62);/g, val: ">" },
      // "amp" : { regex: /&(amp|#38);/g, val: "&" },
      // "quot" : { regex: /&(quot|#34);/g, val: "\"" },
      // "apos" : { regex: /&(apos|#39);/g, val: "'" },
      "cent" : { regex: /&(cent|#162);/g, val: "¢" },
      "pound" : { regex: /&(pound|#163);/g, val: "£" },
      "yen" : { regex: /&(yen|#165);/g, val: "¥" },
      "euro" : { regex: /&(euro|#8364);/g, val: "€" },
      "copyright" : { regex: /&(copy|#169);/g, val: "©" },
      "reg" : { regex: /&(reg|#174);/g, val: "®" },
      "inr" : { regex: /&(inr|#8377);/g, val: "₹" },
      "num_dec": { regex: /&#([0-9]{1,7});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 10)) },
      "num_hex": { regex: /&#x([0-9a-fA-F]{1,6});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 16)) },
    };
    this.addExternalEntities = addExternalEntities;
    this.parseXml = parseXml;
    this.parseTextData = parseTextData;
    this.resolveNameSpace = resolveNameSpace;
    this.buildAttributesMap = buildAttributesMap;
    this.isItStopNode = isItStopNode;
    this.replaceEntitiesValue = replaceEntitiesValue;
    this.readStopNodeData = readStopNodeData;
    this.saveTextToParentTag = saveTextToParentTag;
    this.addChild = addChild;
  }

}

function addExternalEntities(externalEntities){
  const entKeys = Object.keys(externalEntities);
  for (let i = 0; i < entKeys.length; i++) {
    const ent = entKeys[i];
    this.lastEntities[ent] = {
       regex: new RegExp("&"+ent+";","g"),
       val : externalEntities[ent]
    }
  }
}

/**
 * @param {string} val
 * @param {string} tagName
 * @param {string} jPath
 * @param {boolean} dontTrim
 * @param {boolean} hasAttributes
 * @param {boolean} isLeafNode
 * @param {boolean} escapeEntities
 */
function parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {
  if (val !== undefined) {
    if (this.options.trimValues && !dontTrim) {
      val = val.trim();
    }
    if(val.length > 0){
      if(!escapeEntities) val = this.replaceEntitiesValue(val);
      
      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);
      if(newval === null || newval === undefined){
        //don't parse
        return val;
      }else if(typeof newval !== typeof val || newval !== val){
        //overwrite
        return newval;
      }else if(this.options.trimValues){
        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);
      }else{
        const trimmedVal = val.trim();
        if(trimmedVal === val){
          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);
        }else{
          return val;
        }
      }
    }
  }
}

function resolveNameSpace(tagname) {
  if (this.options.removeNSPrefix) {
    const tags = tagname.split(':');
    const prefix = tagname.charAt(0) === '/' ? '/' : '';
    if (tags[0] === 'xmlns') {
      return '';
    }
    if (tags.length === 2) {
      tagname = prefix + tags[1];
    }
  }
  return tagname;
}

//TODO: change regex to capture NS
//const attrsRegx = new RegExp("([\\w\\-\\.\\:]+)\\s*=\\s*(['\"])((.|\n)*?)\\2","gm");
const attrsRegx = new RegExp('([^\\s=]+)\\s*(=\\s*([\'"])([\\s\\S]*?)\\3)?', 'gm');

function buildAttributesMap(attrStr, jPath, tagName) {
  if (!this.options.ignoreAttributes && typeof attrStr === 'string') {
    // attrStr = attrStr.replace(/\r?\n/g, ' ');
    //attrStr = attrStr || attrStr.trim();

    const matches = util.getAllMatches(attrStr, attrsRegx);
    const len = matches.length; //don't make it inline
    const attrs = {};
    for (let i = 0; i < len; i++) {
      const attrName = this.resolveNameSpace(matches[i][1]);
      let oldVal = matches[i][4];
      let aName = this.options.attributeNamePrefix + attrName;
      if (attrName.length) {
        if (this.options.transformAttributeName) {
          aName = this.options.transformAttributeName(aName);
        }
        if(aName === "__proto__") aName  = "#__proto__";
        if (oldVal !== undefined) {
          if (this.options.trimValues) {
            oldVal = oldVal.trim();
          }
          oldVal = this.replaceEntitiesValue(oldVal);
          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);
          if(newVal === null || newVal === undefined){
            //don't parse
            attrs[aName] = oldVal;
          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){
            //overwrite
            attrs[aName] = newVal;
          }else{
            //parse
            attrs[aName] = parseValue(
              oldVal,
              this.options.parseAttributeValue,
              this.options.numberParseOptions
            );
          }
        } else if (this.options.allowBooleanAttributes) {
          attrs[aName] = true;
        }
      }
    }
    if (!Object.keys(attrs).length) {
      return;
    }
    if (this.options.attributesGroupName) {
      const attrCollection = {};
      attrCollection[this.options.attributesGroupName] = attrs;
      return attrCollection;
    }
    return attrs
  }
}

const parseXml = function(xmlData) {
  xmlData = xmlData.replace(/\r\n?/g, "\n"); //TODO: remove this line
  const xmlObj = new xmlNode('!xml');
  let currentNode = xmlObj;
  let textData = "";
  let jPath = "";
  for(let i=0; i< xmlData.length; i++){//for each char in XML data
    const ch = xmlData[i];
    if(ch === '<'){
      // const nextIndex = i+1;
      // const _2ndChar = xmlData[nextIndex];
      if( xmlData[i+1] === '/') {//Closing Tag
        const closeIndex = findClosingIndex(xmlData, ">", i, "Closing Tag is not closed.")
        let tagName = xmlData.substring(i+2,closeIndex).trim();

        if(this.options.removeNSPrefix){
          const colonIndex = tagName.indexOf(":");
          if(colonIndex !== -1){
            tagName = tagName.substr(colonIndex+1);
          }
        }

        if(this.options.transformTagName) {
          tagName = this.options.transformTagName(tagName);
        }

        if(currentNode){
          textData = this.saveTextToParentTag(textData, currentNode, jPath);
        }

        //check if last tag of nested tag was unpaired tag
        const lastTagName = jPath.substring(jPath.lastIndexOf(".")+1);
        if(tagName && this.options.unpairedTags.indexOf(tagName) !== -1 ){
          throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);
        }
        let propIndex = 0
        if(lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1 ){
          propIndex = jPath.lastIndexOf('.', jPath.lastIndexOf('.')-1)
          this.tagsNodeStack.pop();
        }else{
          propIndex = jPath.lastIndexOf(".");
        }
        jPath = jPath.substring(0, propIndex);

        currentNode = this.tagsNodeStack.pop();//avoid recursion, set the parent tag scope
        textData = "";
        i = closeIndex;
      } else if( xmlData[i+1] === '?') {

        let tagData = readTagExp(xmlData,i, false, "?>");
        if(!tagData) throw new Error("Pi Tag is not closed.");

        textData = this.saveTextToParentTag(textData, currentNode, jPath);
        if( (this.options.ignoreDeclaration && tagData.tagName === "?xml") || this.options.ignorePiTags){

        }else{
  
          const childNode = new xmlNode(tagData.tagName);
          childNode.add(this.options.textNodeName, "");
          
          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){
            childNode[":@"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);
          }
          this.addChild(currentNode, childNode, jPath)

        }


        i = tagData.closeIndex + 1;
      } else if(xmlData.substr(i + 1, 3) === '!--') {
        const endIndex = findClosingIndex(xmlData, "-->", i+4, "Comment is not closed.")
        if(this.options.commentPropName){
          const comment = xmlData.substring(i + 4, endIndex - 2);

          textData = this.saveTextToParentTag(textData, currentNode, jPath);

          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);
        }
        i = endIndex;
      } else if( xmlData.substr(i + 1, 2) === '!D') {
        const result = readDocType(xmlData, i);
        this.docTypeEntities = result.entities;
        i = result.i;
      }else if(xmlData.substr(i + 1, 2) === '![') {
        const closeIndex = findClosingIndex(xmlData, "]]>", i, "CDATA is not closed.") - 2;
        const tagExp = xmlData.substring(i + 9,closeIndex);

        textData = this.saveTextToParentTag(textData, currentNode, jPath);

        let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true, true);
        if(val == undefined) val = "";

        //cdata should be set even if it is 0 length string
        if(this.options.cdataPropName){
          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);
        }else{
          currentNode.add(this.options.textNodeName, val);
        }
        
        i = closeIndex + 2;
      }else {//Opening tag
        let result = readTagExp(xmlData,i, this.options.removeNSPrefix);
        let tagName= result.tagName;
        const rawTagName = result.rawTagName;
        let tagExp = result.tagExp;
        let attrExpPresent = result.attrExpPresent;
        let closeIndex = result.closeIndex;

        if (this.options.transformTagName) {
          tagName = this.options.transformTagName(tagName);
        }
        
        //save text as child node
        if (currentNode && textData) {
          if(currentNode.tagname !== '!xml'){
            //when nested tag is found
            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);
          }
        }

        //check if last tag was unpaired tag
        const lastTag = currentNode;
        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){
          currentNode = this.tagsNodeStack.pop();
          jPath = jPath.substring(0, jPath.lastIndexOf("."));
        }
        if(tagName !== xmlObj.tagname){
          jPath += jPath ? "." + tagName : tagName;
        }
        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {
          let tagContent = "";
          //self-closing tag
          if(tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1){
            i = result.closeIndex;
          }
          //unpaired tag
          else if(this.options.unpairedTags.indexOf(tagName) !== -1){
            i = result.closeIndex;
          }
          //normal tag
          else{
            //read until closing tag is found
            const result = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);
            if(!result) throw new Error(`Unexpected end of ${rawTagName}`);
            i = result.i;
            tagContent = result.tagContent;
          }

          const childNode = new xmlNode(tagName);
          if(tagName !== tagExp && attrExpPresent){
            childNode[":@"] = this.buildAttributesMap{"$type":"Microsoft.Marketplace.Storefront.Contracts.V1.ResponseItem, Microsoft.Marketplace.Storefront.Contracts","Path":"/recommendations/collections/TopFree?market=IN&locale=en-US&mediaType=Apps&architecture=x64&deviceFamily=Windows.Desktop&appVersion=22401.1401.0.0&pageSize=15&cardsEnabled=true&smode=false&deviceFamilyVersion=2814751250251776&appmodels=uwp,win32","ExpiryUtc":"2024-03-25T20:34:53.1087019Z","Payload":{"$type":"Microsoft.Marketplace.Storefront.Contracts.V3.ProductList, Microsoft.Marketplace.Storefront.Contracts","ListType":"TopFree","ListId":"TopFree","Anid":"70F3055FED9B784CC1A201D7FFFFFFFF","Cards":[{"$type":"Microsoft.Marketplace.Storefront.Contracts.V8.One.CardModel, Microsoft.Marketplace.Storefront.Contracts","ProductId":"9NKSQGP7F2NH","TileLayout":"Square","Title":"WhatsApp","Images":[{"$type":"Microsoft.Marketplace.Storefront.Contracts.V2.ImageItem, Microsoft.Marketplace.Storefront.Contracts","ImageType":"logo","BackgroundColor":"","ForegroundColor":"","Caption":"","ImagePositionInfo":"","Url":"https://store-images.s-microsoft.com/image/apps.8453.13655054093851568.4a371b72-2ce8-4bdb-9d83-be49894d3fa0.7f3687b9-847d-4f86-bb5c-c73259e2b38e","Height":300,"Width":300},{"$type":"Microsoft.Marketplace.Storefront.Contracts.V2.ImageItem, Microsoft.Marketplace.Storefront.Contracts","ImageType":"logo","BackgroundColor":"","ForegroundColor":"","Caption":"","ImagePositionInfo":"","Url":"https://store-images.s-microsoft.com/image/apps.54968.13655054093851568.4a371b72-2ce8-4bdb-9d83-be49894d3fa0.1eb77bbf-5dae-4aeb-aa2a-b0305c2336dd","Height":150,"Width":150}],"Previews":[{"$type":"Microsoft.Marketplace.Storefront.Contracts.V2.ImageItem, Microsoft.Marketplace.Storefront.Contracts","ImageType":"Screenshot","BackgroundColor":"","ForegroundColor":"","Caption":"","ImagePositionInfo":"Desktop/0","Url":"https://store-images.s-microsoft.com/image/apps.37970.13655054093851568.4a371b72-2ce8-4bdb-9d83-be49894d3fa0.2257ad99-b490-47d4-9d6f-da8719593f88","Height":810,"Width":1440}],"DisplayPrice":"Free","Price":0.0,"AverageRating":4.1,"RatingsCount":"109K","Description":"WhatsApp from Meta is a 100% free messaging app. It’s used by over 2B people in more than 180 countries. It’s simple, reliable, and private, so you can easily keep in touch with your friends and family. WhatsApp works…","PackageFamilyNames":["5319275A.WhatsAppDesktop_cv1g1gvanyjgm"],"ContentIds":["7152871f-a10c-5214-9d97-97495e3d2185"],"GamingOptionsXboxLive":false,"AvailableDevicesDisplayText":"","AvailableDevicesNarratorText":"PC","TypeTag":"app","ProductFamilyName":"Apps","SkusSummary":[{"$type":"Microsoft.Marketplace.Storefront.Contracts.V8.SkuSummary, Microsoft.Marketplace.Storefront.Contracts","SkuId":"0010","MSRP":0.0,"DisplayMSRP":"Free","SalePrices":[{"$type":"Microsoft.Marketplace.Storefront.Contracts.V9.SalePrice, Microsoft.Marketplace.Storefront.Contracts","Price":0.0,"DisplayPrice":"Free","BadgeId":"default"}]},{"$type":"Microsoft.Marketplace.Storefront.Contracts.V8.SkuSummary, Microsoft.Marketplace.Storefront.Contracts","SkuId":"0011"}],"IsGamingAppOnly":false,"Categories":["Social"],"ReleaseDate":"2017-02-01T01:35:55.2651977Z","PublisherName":"WhatsApp Inc.","Installer":{"$type":"Microsoft.Marketplace.Storefront.Contracts.V9.Installer, Microsoft.Marketplace.Storefront.Contracts","Type":"WindowsUpdate","Id":"9NKSQGP7F2NH"},"ProductRatings":[{"$type":"Microsoft.Marketplace.Storefront.Contracts.V2.ProductRating, Microsoft.Marketplace.Storefront.Contracts","RatingSystem":"IARC","RatingSystemShortName":"IARC","RatingSystemId":"IARC","RatingSystemUrl":"https://www.globalratings.com/","RatingValue":"3+","RatingId":"IARC:3","RatingValueLogoUrl":"https://store-images.s-microsoft.com/image/global.9404.image.ddda1b2c-d334-444b-b055-e23fec6772d7.13e2dfc1-450e-4973-bcbb-f35d2cc4f4ed","RatingAge":0,"RestrictMetadata":false,"RestrictPurchase":false,"RatingDescriptors":[],"RatingDisclaimers":[],"InteractiveElements":["Users Interact"],"LongName":"3+","ShortName":"3+","Description":"For ages 3 and up"}],"MinimumAge":0.0,"HasIAPs":false,"CardActions":["Update","Launch","Install","Purchase"],"SupportsInstantGaming":false,"Schema":"Card;1"},{"$type":"Microsoft.Marketplace.Storefront.Contracts.V8.One.CardModel, Microsoft.Marketplace.Storefront.Contracts","ProductId":"9NBLGGH5L9XT","TileLayout":"Square","Title":"Instagram","Images":[{"$type":"Microsoft.Marketplace.Storefront.Contracts.V2.ImageItem, Microsoft.Marketplace.Storefront.Contracts","ImageType":"logo","BackgroundColor":"","ForegroundColor":"","Caption":"","ImagePositionInfo":"","Url":"https://store-images.s-microsoft.com/image/apps.43327.13510798887167234.cadff69d-8229-427b-a7da-21dbaf80bd81.79b8f512-1b22-45d6-9495-881485e3a87e","Height":300,"Width":300}],"Previews":[{"$type":"Microsoft.Marketplace.Storefront.Contracts.V2.ImageItem, Microsoft.Marketplace.Storefront.Contracts","ImageType":"Screenshot","BackgroundColor":"","ForegroundColor":"","Caption":"","ImagePositionInfo":"Desktop/0","Url":"https://store-images.s-microsoft.com/image/apps.61285.13510798887167234.ac7a8ac8-9ca9-4f4d-b67f-eaa709be3ed2.e7d06981-b00c-43ca-be64-06fa5626afd3","Height":1536,"Width":2732}],"DisplayPrice":"Free","Price":0.0,"AverageRating":4.2,"RatingsCount":"10K","Description":"Bringing you closer to the people and things you love. – Instagram from Meta.\r\n\r\nConnect with friends, share what you're up to or see what's new from others all over the world. Explore our community where you can feel…","PackageFamilyNames":["Facebook.InstagramBeta_8xx8rvfyw5nnt"],"ContentIds":["f599cd82-2d93-2417-0ab3-b09df73c9f32"],"GamingOptionsXboxLive":false,"AvailableDevicesDisplayText":"","AvailableDevicesNarratorText":"PC","TypeTag":"app","ProductFamilyName":"Apps","SkusSummary":[{"$type":"Microsoft.Marketplace.Storefront.Contracts.V8.SkuSummary, Microsoft.Marketplace.Storefront.Contracts","SkuId":"0010","MSRP":0.0,"DisplayMSRP":"Free","SalePrices":[{"$type":"Microsoft.Marketplace.Storefront.Contracts.V9.SalePrice, Microsoft.Marketplace.Storefront.Contracts","Price":0.0,"DisplayPrice":"Free","BadgeId":"default"}]},{"$type":"Microsoft.Marketplace.Storefront.Contracts.V8.SkuSummary, Microsoft.Marketplace.Storefront.Contracts","SkuId":"0011"}],"IsGamingAppOnly":false,"Categories":["Social"],"ReleaseDate":"2016-02-26T19:30:49.054444Z","PublisherName":"Instagram","Installer":{"$type":"Microsoft.Marketplace.Storefront.Contracts.V9.Installer, Microsoft.Marketplace.Storefront.Contracts","Type":"WindowsUpdate","Id":"9NBLGGH5L9XT"},"ProductRatings":[{"$type":"Microsoft.Marketplace.Storefront.Contracts.V2.ProductRating, Microsoft.Marketplace.Storefront.Contracts","RatingSystem":"IARC","RatingSystemShortName":"IARC","RatingSystemId":"IARC","RatingSystemUrl":"https://www.globalratings.com/","RatingValue":"12+","RatingId":"IARC:12","RatingValueLogoUrl":"https://store-images.s-microsoft.com/image/global.32925.image.f2c0ad38-c096-4e05-a76f-5c72d9258eaa.ecc5c21f-6a74-416a-98c1-99967316380b","RatingAge":12,"RestrictMetadata":false,"RestrictPurchase":false,"RatingDescriptors":["Parental Guidance Recommended"],"RatingDescriptorLogoUrls":[],"RatingDisclaimers":[],"InteractiveElements":["Shares Location","Users Interact"],"LongName":"12+","ShortName":"12+","Description":"For ages 12 and up"}],"MinimumAge":12.0,"HasIAPs":false,"CardActions":["Update","Launch","Install","Purchase"],"AppExtCategoryNames":["AppExtension-microsoft.store.edgePWA","AppExtension-com.ms.webapp.internals.4"],"SupportsInstantGaming":false,"Schema":"Card;1"},{"$type":"Microsoft.Marketplace.Storefront.Contracts.V8.One.CardModel, Microsoft.Marketplace.Storefront.Contracts","ProductId":"9NZTWSQNTD0S","TileLayout":"Square","Title":"Telegram Desktop","Images":[{"$type":"Microsoft.Marketplace.Storefront.Contracts.V2.ImageItem, Microsoft.Marketplace.Storefront.Contracts","ImageType":"logo","BackgroundColor":"#1e94d0","ForegroundColor":"","Caption":"","ImagePositionInfo":"","Url":"https://store-images.s-microsoft.com/image/apps.28846.14473651905739879.7f4336