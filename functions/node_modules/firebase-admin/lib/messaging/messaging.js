/*! firebase-admin v11.11.1 */
"use strict";
/*!
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Messaging = void 0;
const deep_copy_1 = require("../utils/deep-copy");
const error_1 = require("../utils/error");
const utils = require("../utils");
const validator = require("../utils/validator");
const messaging_internal_1 = require("./messaging-internal");
const messaging_api_request_internal_1 = require("./messaging-api-request-internal");
// FCM endpoints
const FCM_SEND_HOST = 'fcm.googleapis.com';
const FCM_SEND_PATH = '/fcm/send';
const FCM_TOPIC_MANAGEMENT_HOST = 'iid.googleapis.com';
const FCM_TOPIC_MANAGEMENT_ADD_PATH = '/iid/v1:batchAdd';
const FCM_TOPIC_MANAGEMENT_REMOVE_PATH = '/iid/v1:batchRemove';
// Maximum messages that can be included in a batch request.
const FCM_MAX_BATCH_SIZE = 500;
// Key renames for the messaging notification payload object.
const CAMELCASED_NOTIFICATION_PAYLOAD_KEYS_MAP = {
    bodyLocArgs: 'body_loc_args',
    bodyLocKey: 'body_loc_key',
    clickAction: 'click_action',
    titleLocArgs: 'title_loc_args',
    titleLocKey: 'title_loc_key',
};
// Key renames for the messaging options object.
const CAMELCASE_OPTIONS_KEYS_MAP = {
    dryRun: 'dry_run',
    timeToLive: 'time_to_live',
    collapseKey: 'collapse_key',
    mutableContent: 'mutable_content',
    contentAvailable: 'content_available',
    restrictedPackageName: 'restricted_package_name',
};
// Key renames for the MessagingDeviceResult object.
const MESSAGING_DEVICE_RESULT_KEYS_MAP = {
    message_id: 'messageId',
    registration_id: 'canonicalRegistrationToken',
};
// Key renames for the MessagingDevicesResponse object.
const MESSAGING_DEVICES_RESPONSE_KEYS_MAP = {
    canonical_ids: 'canonicalRegistrationTokenCount',
    failure: 'failureCount',
    success: 'successCount',
    multicast_id: 'multicastId',
};
// Key renames for the MessagingDeviceGroupResponse object.
const MESSAGING_DEVICE_GROUP_RESPONSE_KEYS_MAP = {
    success: 'successCount',
    failure: 'failureCount',
    failed_registration_ids: 'failedRegistrationTokens',
};
// Key renames for the MessagingTopicResponse object.
const MESSAGING_TOPIC_RESPONSE_KEYS_MAP = {
    message_id: 'messageId',
};
// Key renames for the MessagingConditionResponse object.
const MESSAGING_CONDITION_RESPONSE_KEYS_MAP = {
    message_id: 'messageId',
};
/**
 * Maps a raw FCM server response to a MessagingDevicesResponse object.
 *
 * @param response - The raw FCM server response to map.
 *
 * @returns The mapped MessagingDevicesResponse object.
 */
function mapRawResponseToDevicesResponse(response) {
    // Rename properties on the server response
    utils.renameProperties(response, MESSAGING_DEVICES_RESPONSE_KEYS_MAP);
    if ('results' in response) {
        response.results.forEach((messagingDeviceResult) => {
            utils.renameProperties(messagingDeviceResult, MESSAGING_DEVICE_RESULT_KEYS_MAP);
            // Map the FCM server's error strings to actual error objects.
            if ('error' in messagingDeviceResult) {
                const newError = error_1.FirebaseMessagingError.fromServerError(messagingDeviceResult.error, /* message */ undefined, messagingDeviceResult.error);
                messagingDeviceResult.error = newError;
            }
        });
    }
    return response;
}
/**
 * Maps a raw FCM server response to a MessagingDeviceGroupResponse object.
 *
 * @param response - The raw FCM server response to map.
 *
 * @returns The mapped Messagtem,canMoveItemIntoTeamDrive,canMoveItemOutOfDrive,canMoveItemOutOfTeamDrive,canMoveItemWithinDrive,canMoveChildrenOutOfTeamDrive)");d=
KSs(this,d,"drive#file").start().then(function(e){return USs(a,e)});c&&(c=VSs(this,a),d=Promise.all([d,c]).then(function(e){var f=ja(e);e=f.next().value;f=f.next().value;e.name=f.name;e.Paa=f.name;e.qa=!!f.trusted;return e}));this.ea&&this.ea.set(a,{kdb:d,timestamp:Date.now()});return d};function VSs(a,c){c=a.dA+"/teamdrives/"+c;c=kl(c,"fields","kind,id,name,trusted");return KSs(a,c,"drive#teamDrive").start()}
function SSs(a,c){if(a!==c.id)throw Error("Tca`"+a+"`"+c.id);a=new OSs({id:c.id,name:c.title});c.resourceKey&&(a.resourceKey=c.resourceKey);a.shared=c.shared;a.J2=c.alternateLink;a.iconLink=c.iconLink;a.primarySyncParentId=c.primarySyncParentId;c.userPermission&&(a.FH=c.userPermission.role);a.mimetype=c.mimeType;c.parents&&(a.zF=c.parents.map(function(d){return d.id}));a.teamDriveId=c.teamDriveId;c.capabilities&&(a.ea=c.capabilities.canAddChildren,a.canAddMyDriveParent=c.capabilities.canAddMyDriveParent,
a.canEdit=c.capabilities.canEdit,a.canMoveTeamDriveItem=!!c.capabilities.canMoveTeamDriveItem,a.canMoveItemIntoTeamDrive=!!c.capabilities.canMoveItemIntoTeamDrive,a.canMoveItemOutOfDrive=!!c.capabilities.canMoveItemOutOfDrive,a.canMoveItemOutOfTeamDrive=!!c.capabilities.canMoveItemOutOfTeamDrive,a.canMoveItemWithinDrive=!!c.capabilities.canMoveItemWithinDrive,a.ma=c.capabilities.canRemoveChildren);a.oa=c.detectors||[];return a}
function USs(a,c){if(a!==c.id)throw Error("Uca`"+a+"`"+c.id);a=new MSs({id:c.id,name:c.title});c.resourceKey&&(a.resourceKey=c.resourceKey);a.shared=c.shared;a.J2=c.alternateLink;a.iconLink=c.iconLink;a.primarySyncParentId=c.primarySyncParentId;c.userPermission&&(a.FH=c.userPermission.role);c.parents&&(a.zF=c.parents.map(function(d){return d.id}));a.teamDriveId=c.teamDriveId;c.capabilities&&(a.ea=c.capabilities.canAddChildren,a.canAddMyDriveParent=c.capabilities.canAddMyDriveParent,a.canEdit=c.capabilities.canEdit,
a.canMoveChildrenWithinDrive=c.capabilities.canMoveChildrenWithinDrive,a.canMoveItemIntoTeamDrive=!!c.capabilities.canMoveItemIntoTeamDrive,a.canMoveItemOutOfDrive=!!c.capabilities.canMoveItemOutOfDrive,a.canMoveItemOutOfTeamDrive=!!c.capabilities.canMoveItemOutOfTeamDrive,a.canMoveItemWithinDrive=!!c.capabilities.canMoveItemWithinDrive,a.canMoveTeamDriveItem=!!c.capabilities.canMoveTeamDriveItem,a.ma=c.capabilities.canRemoveChildren,a.canMoveChildrenOutOfTeamDrive=!!c.capabilities.canMoveChildrenOutOfTeamDrive);
return a}
function WSs(a,c,d){var e=kl(LSs(a),"q","shortcutDetails.targetId='"+c+"' and creator='me' and trashed=false");e=kl(e,"fields","kind, items(kind,id,title,shortcutDetails(targetId,targetResourceKey),userPermission(role),shared,alternateLink,iconLink,primarySyncParentId,mimeType,parents(id),teamDriveId,capabilities(canAddChildren,canAddMyDriveParent,canEdit,canRemoveChildren,canMoveChildrenWithinDrive,canMoveTeamDriveItem,canMoveItemIntoTeamDrive,canMoveItemOutOfDrive,canMoveItemOutOfTeamDrive,canMoveItemWithinDrive,canMoveChildrenOutOfTeamDrive))");return KSs(a,
e,"drive#fileList",[Kya((new Gm).xc(c),d)]).start().then(function(f){return XSs(c,f)})}
function XSs(a,c){var d=[];c=ja(c.items);for(var e=c.next();!e.done;e=c.next()){e=e.value;if(a!==e.shortcutDetails.targetId)throw Error("Vca`"+a+"`"+e.shortcutDetails.targetId);var f=new PSs({id:e.id,name:e.title});f.shared=e.shared;f.J2=e.alternateLink;f.iconLink=e.iconLink;f.primarySyncParentId=e.primarySyncParentId;e.userPermission&&(f.FH=e.userPermission.role);f.mimetype=e.mimeType;e.parents&&(f.zF=e.parents.map(function(g){return g.id}));e.shortcutDetails.targetId&&(f.targetId=e.shortcutDetails.targetId);
e.shortcutDetails.resourceKey&&(f.resourceKey=e.shortcutDetails.resourceKey);f.teamDriveId=e.teamDriveId;e.capabilities&&(f.ea=e.capabilities.canAddChildren,f.canAddMyDriveParent=e.capabilities.canAddMyDriveParent,f.canEdit=e.capabilities.canEdit,f.canMoveTeamDriveItem=!!e.capabilities.canMoveTeamDriveItem,f.canMoveItemIntoTeamDrive=!!e.capabilities.canMoveItemIntoTeamDrive,f.canMoveItemOutOfTeamDrive=!!e.capabilities.canMoveItemOutOfTeamDrive,f.canMoveItemWithinDrive=!!e.capabilities.canMoveItemWithinDrive,
f.ma=e.capabilities.canRemoveChildren);f.oa=e.detectors||[];d.push(f)}return d};function YSs(a,c,d,e){JSs.call(this,a,c,d,e)}A(YSs,JSs);YSs.prototype.Npa=function(a,c,d){a=LSs(this,a);a=kl(a,"updateViewedDate",!1);c&&0<c.length&&(a=kl(a,"addParents",c.join(",")));d&&0<d.length&&(a=kl(a,"removeParents",d.join(",")));a=kl(a,"fields","kind,id");return dId(KSs(this,a,"drive#file"),"PUT").start()};function ZSs(a,c,d){c=a.dA+"/admin/files/"+c+"/migrateToTeamDrive";c=kl(c,"parents",d);c=kl(c,"fields","kind,id");return dId(KSs(a,c,"drive#file"),"POST").start()}
function $Ss(a,c,d){var e={mimeType:"application/vnd.google-apps.shortcut",shortcutDetails:{}};e.shortcutDetails.targetId=c;d&&(e.parents=[{id:d}]);return lqi(dId(KSs(a,LSs(a),"drive#file"),"POST"),e).start().then(function(f){return f.id})}function aTs(a,c){return dId(KSs(a,LSs(a,c)),"DELETE").start()}function bTs(){return Promise.reject(Error("Wca"))};function cTs(a){var c=a.XRc,d=a.xDc,e,f;a=O;if((1==c.K2.length&&vp(null==(e=c.K2[0])?void 0:e.name)||1<c.K2.length)&&(null==c?0:c.t3b)&&(null==c?0:c.u3b))if((null==c?0:c.Uoa)||(null==c?0:c.V4a)){var g=c.K2.length;var k=c.kDc,l=null==(f=c.K2[0])?void 0:f.name;f=null==c?void 0:c.u3b;e=null==c?void 0:c.t3b;var m=null==c?void 0:c.xsb;c=null==c?void 0:c.Fte;1==g?(g="",m&&c?(d='"'+rp(l)+'" has been moved from '+M1(m,c,d)+" to "+M1(f,e,d),g+=d):(d='"'+rp(l)+'" has been moved to '+M1(f,e,d),g+=d),d=O(g)):
"onlyfiles"==k?(l="",m&&c?(d=rR(new at("{NUM_ITEMS_1,plural,=0{unused plural form}=1{{NUM_ITEMS_2} file has been moved from {XXX_1} to {XXX_2}}other{{NUM_ITEMS_2} files have been moved from {XXX_3} to {XXX_4}}}"),{NUM_ITEMS_1:g,NUM_ITEMS_2:rp(g),XXX_1:M1(m,c,d),XXX_2:M1(f,e,d),XXX_3:M1(m,c,d),XXX_4:M1(f,e,d)}),l+=d):(d=rp(g)+" files have been moved to "+M1(f,e,d),l+=d),d=O(l)):"onlyfolders"==k?(l="",m&&c?(d=rR(new at("{NUM_ITEMS_1,plural,=0{unused plural form}=1{{NUM_ITEMS_2} folder has been moved from {XXX_1} to {XXX_2}}other{{NUM_ITEMS_2} folders have been moved from {XXX_3} to {XXX_4}}}"),
{NUM_ITEMS_1:g,NUM_ITEMS_2:rp(g),XXX_1:M1(m,c,d),XXX_2:M1(f,e,d),XXX_3:M1(m,c,d),XXX_4:M1(f,e,d)}),l+=d):(d=rR(new at("{NUM_ITEMS_1,plural,=0{unused plural form}=1{{NUM_ITEMS_2} folder has been moved to {XXX_1}}other{{NUM_ITEMS_2} folders have been moved to {XXX_2}}}"),{NUM_ITEMS_1:g,NUM_ITEMS_2:rp(g),XXX_1:M1(f,e,d),XXX_2:M1(f,e,d)}),l+=d),d=O(l)):(l="",m&&c?(d=rR(new at("{NUM_ITEMS_1,plural,=0{unused plural form}=1{{NUM_ITEMS_2} item has been moved from {XXX_1} to {XXX_2}}other{{NUM_ITEMS_2} items have been moved from {XXX_3} to {XXX_4}}}"),
{NUM_ITEMS_1:g,NUM_ITEMS_2:rp(g),XXX_1:M1(m,c,d),XXX_2:M1(f,e,d),XXX_3:M1(m,c,d),XXX_4:M1(f,e,d)}),l+=d):(d=rp(g)+" items have been moved to "+M1(f,e,d),l+=d),d=O(l));d=O("<span>"+d+"</span>")}else f=c.K2.length,e=c.kDc,m=null==c?void 0:c.u3b,l=null==c?void 0:c.t3b,k=null==(g=c.K2[0])?void 0:g.name,c="<span>",1==f?(d='"'+rp(k)+'" has been added to '+M1(m,l,d),c+=d):"onlyfiles"==e?(d=rR(new at("{NUM_ITEMS_1,plural,=0{unused plural form}=1{{NUM_ITEMS_2} file has been added to {XXX_1}}other{{NUM_ITEMS_2} files have been added to {XXX_2}}}"),
{NUM_ITEMS_1:f,NUM_ITEMS_2:rp(f),XXX_1:M1(m,l,d),XXX_2:M1(m,l,d)}),c+=d):"onlyfolders"==e?(d=rR(new at("{NUM_ITEMS_1,plural,=0{unused plural form}=1{{NUM_ITEMS_2} folder has been added to {XXX_1}}other{{NUM_ITEMS_2} folders have been added to {XXX_2}}}"),{NUM_ITEMS_1:f,NUM_ITEMS_2:rp(f),XXX_1:M1(m,l,d),XXX_2:M1(m,l,d)}),c+=d):(d=rp(f)+" items have been added to "+M1(m,l,d),c+=d),d=O(c+"</span>");else d="";return a(d)}
function M1(a,c,d){return O('<a href="'+Q(Bp(c))+'" target="_blank"'+(d?' class="'+Q(d)+'"':"")+">"+rp(a)+"</a>")};function dTs(a,c){this.ea=a;this.ma=c}dTs.prototype.Cua=p("ea");dTs.prototype.Yuc=p("ma");function eTs(){this.ea=[];this.ma=[]}function fTs(a,c){a.ea=a.ea.concat(c);return a}eTs.prototype.build=function(){return new dTs(this.ea,this.ma)};function gTs(a,c,d,e){this.oa=a;this.ma=c;this.vO=d;this.ea=e}
function hTs(a,c,d,e){var f=new Map;d=ja(d);for(var g=d.next();!g.done;g=d.next())if(g=g.value,g.targetId){var k=f.get(g.targetId)||[];f.set(g.targetId,k.concat(g))}var l=1===a.length;return fTs(new eTs,a.map(function(m,n){var r=(new eKk).xc(m.id);r=jd(r,5,m.mimetype);var u=new hSs;var w=iTs(m.FH);u=ld(u,1,w);r=pc(r,hSs,9,u);r=ec(r,10,m.oa);r=jd(r,11,m.primarySyncParentId);r=$c(r,12,Na(cl(m.primarySyncParentId))&&"application/vnd.google-apps.folder"===m.mimetype&&"owner"===m.FH&&!e&&0===m.zF.length);
r=$c(r,13,m.shared);l&&r.setTitle(m.name);0===n&&(n=new jSs,n=jd(n,1,m.organizationDisplayName),n=jd(n,2,m.customerId),pc(r,jSs,8,n));m.teamDriveId&&(n=(new dKk).xc(m.teamDriveId).setTitle(m.Paa),pc(r,dKk,3,n));if(m.zF)for(n=ja(m.zF),u=n.next();!u.done;u=n.next())r.PK(jTs(u.value,c));m.shortcutTargetId&&jd(r,14,m.shortcutTargetId);if((n=f.get(m.id))&&0<n.length)for(n=ja(n),u=n.next();!u.done;u=n.next()){w=u.value;u=(new kSs).xc(w.id);w=ja(w.zF);for(var y=w.next();!y.done;y=w.next())u.PK(jTs(y.value,
c));tc(r,15,kSs,u,void 0)}m.ea&&nd(r,16,1);m.canAddMyDriveParent&&nd(r,16,2);m.canEdit&&nd(r,16,3);m.canMoveChildrenWithinDrive&&nd(r,16,5);m.canMoveItemOutOfTeamDrive&&nd(r,16,6);m.canMoveItemWithinDrive&&nd(r,16,7);m.ma&&nd(r,16,8);m.domainUsersOnly&&nd(r,17,1);m.teamMembersOnly&&nd(r,17,2);return r})).build()}
gTs.prototype.create=function(a,c,d,e,f,g,k){var l=this;k=void 0===k?window:k;a=kbl(lSs(jbl(hbl(qbl(pbl(lbl(new gbl,k),a)),k.location.origin),this.ma),this.vO),function(M){kTs(l,M,d(),e())});this.ea&&(a.ma=this.ea);c!==k.location.origin&&hbl(a,c);var m;if(null==g?0:null==(m=g.onePickV2Config)?0:Tb(m,TOi,6)){var n;c=ZXi(null==g?void 0:null==(n=g.onePickV2Config)?void 0:lc(n,TOi,6));a.d9=c}else{var r;rbl(a,(null==g?void 0:null==(r=g.onePickV2Config)?void 0:Ac(r,5))||5)}(null==f?0:f.oauthToken)?a.oauthToken=
f.oauthToken:nbl(a,FJk((null==f?void 0:f.authuser)||0));(null==g?0:g.createShortcutMode)&&mbl(a,2);(null==g?0:g.isMyDriveDisabled)&&oSs(a);(null==g?0:g.enableFolderMoveIn)&&mSs(a);(null==g?0:g.skipAllWarningsForFolderMoveIn)&&nSs(a);(null==g?0:g.themeConfig)&&a.QA(g.themeConfig);(null==g?0:g.enableInheritanceBreaks)&&pSs(a,8);var u;(null==g?0:null==(u=g.onePickV2Config)?0:Ec(u,8,!1))&&pSs(a,7);var w;(null==g?0:null==(w=g.onePickV2Config)?0:w.PJb())&&$c(a.config,8,!0);var y,E;obl(a,null!=(E=null==
g?void 0:null==(y=g.onePickV2Config)?void 0:y.agb())?E:0);var H;(null==g?0:null==(H=g.onePickV2Config)?0:Ec(H,13,!1))&&pSs(a,10);return a.build()};
function kTs(a,c,d,e){var f=c.D1,g=[].concat(ma(new Set(d.flatMap(function(m){return m.zF}))));d=1===g.length?lTs(d,e):{};var k,l;e={x0:xc(f,1),vUa:f.Nr(),GGb:ac(f,22),cda:xc(f,72),tdb:c.Sza,FGb:xc(f,93),EGb:xc(f,136),Apc:null==(k=lc(f,gSs,109))?void 0:ac(k,3),Bpc:null==(l=lc(f,gSs,109))?void 0:ac(l,4)};a.oa(Object.assign({},d,e,{yga:1<g.length,WW:c.WW}))}
function lTs(a,c){a=a&&a[0];var d=a.zF[0];c=jTs(d,c);return{sourceParentId:d,sourceParentName:c.getTitle(),sourceParentTeamDriveId:a.teamDriveId,sourceParentTeamDriveName:a.Paa}}function iTs(a){switch(a){case "owner":return 1;case "reader":return 2;case "writer":return 3;case "commenter":return 4;case "organizer":return 5;case "fileOrganizer":return 7;default:throw Error("Yca`"+a);}}
function jTs(a,c){var d=(new dKk).xc(a);if(c=c.get(a))d.setTitle(c.name),c.canMoveChildrenWithinDrive&&nd(d,4,5),a=new hSs,c=iTs(c.FH),a=ld(a,1,c),pc(d,hSs,7,a);return d};function mTs(a,c){Po.call(this);this.jl=a;this.origin=c;this.Lf=new vt(this);this.ma=this.oauthToken=this.oa=this.authuser=null;this.ua=!1;this.va=this.qa=this.ea=null;this.Fa(this.Lf)}A(mTs,Po);mTs.prototype.showPicker=function(a,c,d,e,f,g,k,l,m,n,r,u,w,y){var E=this;return nTs(this,void 0===r?!1:r,void 0===u?!1:u,f,g,k,l,w,y).then(function(){E.dispatchEvent("Xk");var H;null==(H=E.ma)||H.show();E.ea=Vn();return E.ea.promise})};function oTs(a){var c;null==(c=a.ma)||c.He();return!1}
mTs.prototype.VZ=function(a,c){this.oa=a;this.authuser=c};
function nTs(a,c,d,e,f,g,k,l,m){e=void 0===e?Sn([]):e;f=void 0===f?Sn([]):f;g=void 0===g?Sn([]):g;k=void 0===k?Sn(!0):k;(null==l?0:Ec(l,8,!1))||Ao(a.ma);return Un([e,f,g,k]).then(function(n){var r=ja(n);n=r.next().value;var u=r.next().value,w=r.next().value;r=r.next().value;var y=a.origin||"";if(!y)try{y=hKh(Kn(a.jl).top.location.href)}catch(H){}var E=0===w.filter(function(H){return H.ma}).length;pTs(a,w,n,u,y,c,r,E,d,l,m)},function(n){var r=a.ea;a.ea=null;oTs(a);r.reject(n)})}
function pTs(a,c,d,e,f,g,k,l,m,n,r){var u=new Map;c=ja(c);for(var w=c.next();!w.done;w=c.next())w=w.value,u.set(w.id,w);a.va=u;a.qa=d;(null==n?0:Ec(n,8,!1))&&a.ma&&g===a.ua?(a.ma.zm(hTs(d,u,e,l)),a.ma.reset()):(c=a.authuser?Number(a.authuser):0,isNaN(c)&&(c=0),f=(new gTs(function(y){var E;null==(E=a.ea)||E.resolve(y)},function(){var y;null==(y=a.ea)||y.reject("cp");a.ea=null},function(y){a.vO(y)},function(y){switch(Kc(y,1,0)){case 1:a.dispatchEvent("Wk")}})).create(a.oa||"unknown",f,function(){return a.qa},
function(){return a.va},{authuser:c,oauthToken:a.oauthToken},{createShortcutMode:g,isMyDriveDisabled:!k,enableFolderMoveIn:!1,enableInheritanceBreaks:m,onePickV2Config:n,skipAllWarningsForFolderMoveIn:!0,themeConfig:r},Kn(a.jl)),f.zm(hTs(d,u,e,l)),a.ma=f,a.ua=g,a.Fa(f))}mTs.prototype.vO=function(a){var c;null==(c=this.ea)||c.reject(a);this.ea=null};function qTs(a,c,d){mTs.call(this,c,d)}A(qTs,mTs);function rTs(){Ia.apply(this,arguments)}A(rTs,Ia);function sTs(a){return"cp"===a||"catd"===a||"clid"===a||"csc"===a||"pfc"===a||"iid"===a};function tTs(a){a=a||{};var c=a.dAd,d='<div class="'+Q("drive-organize-atd-popup")+'" aria-live="polite"><div class="'+Q("drive-organize-popup-message")+" "+Q("drive-organize-atd-adding-msg")+'">';var e=a||{};var f="<span>";e.ida?(e="Adding shortcut to <b>"+uTs(e)+"</b>\u2026",f+=e):f+="Adding to <b>My Drive</b>\u2026";f=O(f+"</span>");d=d+f+'</div><div class="'+Q("drive-organize-popup-message")+" "+Q("drive-organize-atd-added-msg")+'">';e=a||{};f="<span>";e.ida?(e="Shortcut added to <b>"+uTs(e)+
"</b>",f+=e):f+="Added to <b>My Drive</b>";f=O(f+"</span>");d=d+f+'</div><div class="'+Q("drive-organize-popup-message")+" "+Q("drive-organize-atd-error-msg")+'" style="display: none;">';f=a||{};a="<span>";f.ida?(f="Unable to add shortcut to <b>"+uTs(f)+"</b>",a+=f):a+="Unable to add to <b>My Drive</b>";a=O(a+"</span>");a=d+a+"</div>";c||(a+='<div class="'+Q("drive-organize-atd-popup-undo-btn")+" "+Q("drive-organize-popup-link-btn")+'">',a+="Undo</div>");return O(a+"</div>")}
function uTs(a){a=a||{};a=a.U8b;var c="";c=a?c+rp(a):c+"Drive";return O(c)};function vTs(a,c,d,e,f){Iwc.call(this,a,c,!0);this.ua=d;this.wa=e;this.va=f}A(vTs,Iwc);vTs.prototype.Kf=function(a,c,d,e){var f=zo(this.element,this.ea,a,c,null,d,10,e,this.oa);if(f&496){var g=Jwc(f,this.ea);c=Jwc(f,c);f=zo(this.element,g,a,c,null,d,10,e,this.oa);f&496&&(g=Jwc(f,g),c=Jwc(f,c),zo(this.element,g,a,c,null,d,this.qa,e,this.oa));wTs(this,a,g)}else wTs(this,a,this.ea)};
function wTs(a,c,d){d=0===(d&1);Ux(a.ua,a.va,d);Ux(a.ua,a.wa,!d);d=VCa(a.element,c);c=hDa(c).width;var e=hDa(a.ua).width;d=Math.max(0,d.x)+Math.min(hDa(a.element).width,c)/2-e/2;d=Math.min(d,c-e);d=Math.max(0,d);co(a.ua,"left",d+"px")};function xTs(a){var c=a.lrb,d=O;c='<div class="'+Q("drive-organize-popup")+'"><div class="'+Q("drive-organize-popup-content")+'" tabIndex="0">'+(c?'<div class="'+Q("drive-organize-popup-organize-btn")+" "+Q("drive-organize-popup-link-btn")+'">'+rp(c)+"</div>":"")+'<div class="'+Q("drive-organize-popup-close-btn")+'">';a=a=a||{};a=O('<svg x="0px" y="0px" width="15" height="15" viewBox="0 0 15 15"><polygon points="10.5,11.914 13.5,14.914 14.914,13.5 11.914,10.5 14.914,7.5 13.5,6.086 10.5,9.086 7.5,6.086 6.085,7.5 9.085,10.5 6.085,13.5 7.5,14.914 " fill="'+
Q("black"===a.fF?"#FFFFFF":"#000000")+'" style="opacity:0.5" transform="translate(-2.9561186,-2.5084746)"/></svg>');return d(c+a+'</div></div><div class="'+Q("drive-organize-popup-arrow")+'"><div class="'+Q("drive-organize-popup-triangle-before")+'"></div><div class="'+Q("drive-organize-popup-triangle-after")+'"></div></div></div>')};function yTs(a,c){uy.call(this,c);this.lrb=a;this.ea=new Yy;this.oa=this.Ga=this.Qja=this.anchor=this.xa=null;this.Aa=!1;this.Fa(this.ea);a=zTses"!==ISs(c);if(f||H)d.WW=!1;H=d.x0?[d.x0]:void 0;var M=d.sourceParentId&&d.sourceParentId!==d.x0?[d.sourceParentId]:void 0;if(f&&!k)return bTs({Baf:c.reduce(function(fa,
ka){return[].concat(ma(fa),[ka.id])},[]),y7e:d.x0,z6e:g,G$e:n}).then(m,r).finally(h()),E.promise;a.dispatchEvent("Yk");g=ja(c);for(var S=g.next(),aa={};!S.done;aa={h_a:void 0},S=g.next()){aa.h_a=S.value;S=void 0;f&&k?(S=ZSs(a.qa,aa.h_a.id,d.x0),w=!0):(d.yga&&(M=aa.h_a.zF.filter(function(fa){return fa!==d.x0})),S=a.qa.Npa(aa.h_a.id,H,M));var ca=void 0;null==(ca=S)||ca.then(function(fa){return function(){var ka=fa.h_a;y--;u.push(ka);0===y&&E.resolve(l())}}(aa),function(fa){y--;0===y&&(0<u.length?E.resolve(l()):
E.reject(fa))})}return E.promise}v.undo=function(a){for(var c=[],d=ja(a.K2),e=d.next();!e.done;e=d.next()){e=e.value;var f=e.zF.find(function(k){return k===a.Cqb})?void 0:a.Cqb;if(f||a.Uoa||a.V4a){var g=void 0;a.Uoa?g=e.zF.find(function(k){return k===a.Uoa})?[a.Uoa]:void 0:a.V4a&&(g=kb(e.zF));e=this.qa.Npa(e.id,g,f?[f]:void 0);c.push(e)}}return Promise.all(c)};
v.mJ=function(a,c,d,e,f,g,k,l,m,n,r,u){var w=this;u=void 0===u?!1:u;var y,E=new HTs(this.jl,f,this.va.ida,m,void 0===n?!1:n,void 0===r?0:r);this.Fa(E);this.ma=E;var H=!0;a.then(function(){if(H){var M=AUs(d);M&&BTs(E,M);0<E.timeout&&E.delay&&E.delay.start(E.timeout);E.za=!0;DTs(E)}},function(M){y=M;H&&E.bk(AUs(d))});this.dza=!0;return E.show(AUs(d),e).then(function(M){H=!1;switch(M){case 0:w.jMa();var S;return Promise.reject(null!=(S=y)?S:"catd");case 2:return w.jMa(),Promise.reject("uatd");case 1:return M=
w.ea.showPicker(c,AUs(d),e,!1,g,void 0,void 0,void 0,NSs.id,void 0,!1,!1,k,l),Wn(Un([a,g,M]).then(void 0,function(aa){if(oTs(w.ea))return aa=E.show(AUs(d),e),E.bk(),aa.then(function(){var ca;throw null!=(ca=y)?ca:"catd";},void 0);throw aa;}),w.jMa,w).then(function(aa){var ca=aa[0],fa=aa[1];aa=aa[2];var ka=[];if(null==k?0:Ec(k,4,!1))ka=fa;else for(fa=0;fa<ca.length;fa++){var la=new OSs({id:ca[fa],name:""});la.zF=[NSs.id];ka.push(la)}var za;return xUs(w,ka,aa,{Y4b:void 0,Ssb:[],Rsb:[],FMa:[]},null!=
(za=u)?za:!1)},void 0)}},void 0)};
function BUs(a,c,d,e,f,g,k,l,m,n,r){k=void 0===k?!1:k;l=void 0===l?0:l;var u=Vn();a.dza=!0;a.ea.showPicker(1,AUs(d),e,!1,g,f,n,void 0,void 0,void 0,!0,!1,m,r).then(function(w){var y=w.x0,E=w.vUa;k=k||!1===w.WW;w=$Ss(a.qa,c,y);var H=Vn(),M=Vn();w.then(function(S){H.resolve(S);S=new OSs({id:S,name:""});S.mimetype="application/vnd.google-apps.shortcut";S.zF=[y];M.resolve([S])},function(S){S=S&&S.error&&S.error.errors&&S.error.errors[0]&&S.error.errors[0].reason;var aa="uer";"shortcutLimitExceeded"===
S?aa="sle":"shortcutPerCreatorLimitExceeded"===S&&(aa="spcle");u.reject(aa)});E=a.mJ(H.promise,1,d,e,k,M.promise,void 0,void 0,E,!0,l,!1);Un([H.promise,E]).then(function(S){S=ja(S);var aa=S.next().value;S.next();u.resolve({q7b:aa,F6a:!1})},function(S){"uatd"===S?H.promise.then(function(aa){aTs(a.qa,aa).then(function(){u.resolve({q7b:aa,F6a:!0})},function(){u.reject("uatdf")})}):(sTs(S)&&u.resolve({F6a:!1}),u.reject(S))})},function(w){u.reject(w)});return Wn(u.promise,function(){a.jMa()})}
function wUs(a,c){a.dza=!0;if(!c.sdb){var d,e=null!=(d=c.SCc)?d:Promise.resolve(!0);a=a.ea.showPicker(c.numberOfItems,AUs(c.anchor),c.Hre,!1,c.i_a,void 0,c.xMa,e,c.sourceParentId,c.qHb,void 0,c.enableInheritanceBreaks,c.onePickV2Config,c.themeConfig);return CUs(Promise.resolve(c.xMa),Promise.resolve(a))}d=DUs(c.i_a,c.xMa,c.sourceParentId,c.sdb);d=CUs(Promise.resolve(c.xMa),d);return Promise.resolve(sUs(a.wa,d,c.i_a,c.xMa,c.sdb,c.BDb))}
function DUs(a,c,d,e){if(d)return Promise.all([a,c,e]).then(function(f){var g=ja(f);f=g.next().value;var k=g.next().value;g=g.next().value;var l;k=null!=(l=k.find(function(r){return r.id===d}))?l:new MSs({id:"",name:""});l=EUs(g,!!k.teamDriveId,f);var m,n;return{x0:g.id,vUa:g.name,cda:g.teamDriveId,tdb:g.Paa,Apc:g.domainUsersOnly,Bpc:g.teamMembersOnly,GGb:g.shared,FGb:null!=(m=g.organizationDisplayName)?m:"",EGb:null!=(n=g.customerId)?n:"",sourceParentId:k.id,sourceParentName:k.name,sourceParentTeamDriveId:k.teamDriveId,
sourceParentTeamDriveName:k.Paa,yga:!!g.teamDriveId||!!k.teamDriveId,WW:l}});c=FUs(a,c,e);return Promise.all([c,e,a]).then(function(f){var g=ja(f);f=g.next().value;var k=g.next().value;g=g.next().value;var l,m;return{x0:k.id,vUa:k.name,cda:k.teamDriveId,tdb:k.Paa,GGb:k.shared,FGb:null!=(l=k.organizationDisplayName)?l:"",EGb:null!=(m=k.customerId)?m:"",sourceParentId:f.id,sourceParentName:f.name,sourceParentTeamDriveId:f.teamDriveId,sourceParentTeamDriveName:f.Paa,yga:f.yga,WW:EUs(k,!!f.teamDriveId,
g)}})}function CUs(a,c){return Promise.all([a,c]).then(function(d){var e=ja(d);d=e.next().value;if((e=e.next().value)&&e.cda)return e;for(var f,g=0;g<d.length;g++)d[g].id===e.sourceParentId&&(f=d[g]);return f&&!f.canEdit?Promise.reject(new tUs("Source folder is read only.")):e})}
function EUs(a,c,d){var e=c&&!a.teamDriveId&&"onlyfiles"!==ISs(d);if(c=!c&&a.teamDriveId){a:{for(c=0;c<d.length;c++)if("owner"!==d[c].FH){c=!1;break a}c=!0}c=!c}var f=new Set,g=0,k=0;d=ja(d);for(var l=d.next();!l.done;l=d.next())l=l.value,l.teamDriveId?f.add(l.teamDriveId):(g++,k+=GSs(l)?1:0);return a.teamDriveId?0<k?!1:1===f.size&&0===g&&f.has(a.teamDriveId)?a.canMoveItemWithinDrive:a.canMoveItemOutOfTeamDrive:e||c?!1:!0}
function FUs(a,c,d){return Promise.all([a,c,d]).then(function(e){e=ja(e);var f=e.next().value,g=e.next().value,k=e.next().value,l=!(!k||!k.teamDriveId);e={yga:!0};g&&0<g.length&&g[0].teamDriveId&&(e.teamDriveId=g[0].teamDriveId);if(l)return e;l=GUs(f);if(l[k.id]===f.length)throw new rTs("iid");k=HUs(g,k.id);if(0===k.length&&g.every(function(m){return m.ea||"owner"===m.FH||"writer"===m.FH}))return e.yga=!1,e;f=IUs(f.length,l,k);1===k.length&&f&&(f=k[0],e.id=f.id,e.name=f.name,e.yga=!1);return e})}
function GUs(a){for(var c={},d=0;d<a.length;d++)for(var e=0;e<a[d].zF.length;e++){var f=a[d].zF[e];c[f]=(c[f]||0)+1}return c}function HUs(a,c){return a.filter(function(d){return d.id!==c&&(d.ea||"owner"===d.FH||"writer"===d.FH)})}function IUs(a,c,d){return d.every(function(e){return c[e.id]===a})}function zUs(a,c){if(c){var d=sl(new ml(a.ua),"authuser",a.authuser);"root"===c?rl(d,"drive/my-drive"):rl(d,"drive/folders/"+c);Na(cl(a.oa))||sl(d,"usp",a.oa);return d.toString()}}
function AUs(a){return"function"===typeof a?a():a}v.jMa=function(){this.dza&&(this.ma&&(this.ma.He(),this.ma.dispose(),this.ma=null),this.dza=!1,this.dispatchEvent("al"))};v.V4d=function(){this.dispatchEvent("Zk")};v.Ohd=function(){this.dispatchEvent("$k")};var yUs=!1;function JUs(a){this.Ia=Ob(a)}A(JUs,xd);function KUs(a,c){return ld(a,5,c)}JUs.prototype.agb=function(){return Ac(this,9)};JUs.prototype.PJb=function(){return Ec(this,11,!1)};function LUs(a,c,d,e,f,g,k,l,m,n,r,u,w){Po.call(this);var y=this;this.ma=a;this.Ab=c;this.ea=f;this.oa=g;this.Aa=this.va=this.Ea=this.wa=null;this.Ca=this.Ub=!1;this.Db=this.qa=this.xa=null;this.Za=Vn();this.addOnDisposeCallback(function(){y.Za.reject(Error("Zca"))});this.Ua=null;this.Ba=new vt(this);this.Fa(this.Ba);this.Ka=new gq;this.Fa(this.Ka);this.qb=d;this.ua=e;this.Qa=w||null;this.Ga=null;this.Dc=k||wq("folder-move-20");this.qc=wq("folder-20x20");this.wc=l||wq("add-to-drive-20");(a=m)||(a=
LOa);this.Zb=a;this.Lb=fSs;this.Pb=MOa;this.xb=u||null;this.Hb=r||null;this.za=this.ma.ua||this.ma.Ga||iC()&&!Did(this.oa)?!1:!0}A(LUs,Po);LUs.prototype.initialize=function(a){var c=this;this.Ua=a;this.wa=MUs(this.oa,!!this.Qa);this.Qa?mie(this.Qa,function(){return Sn(c.wa.init())}).then(function(){return NUs(c)}):(this.wa.init(),NUs(this))};
function NUs(a){a.Fa(a.wa);var c={ida:!0,pHb:!0};a.Aa=new QSs(a.wa,3,void 0,c);a.Fa(a.Aa);a.Ea=new YSs(a.wa,3,void 0,c);a.Fa(a.Ea);var d=OUs(a);a.Fa(d);c=PUs(d,a.Ea,a.Ab,c,a.oa);a.Fa(c);a.va=c;QUs(a);a.Ba.listen(a.va,"$k",function(){RUs(!0)});a.Ba.listen(a.va,"al",a.jb);a.Ba.listen(a.va,"Yk",a.yc);hq(a.Ka,a.ma.Qa,function(e){a.qa&&(a.qa.name=e.newTitle)})}
function OUs(a){var c=rk(a.oa,"docs-to"),d=rk(a.oa,"opbu");c=new qTs(d,a.Ab,c);d=mB(lB.Nb(),a.oa);var e=rk(a.oa,"ophi")+"-move";c.VZ(e,d);a.oa.ib("docs-etdimo");return c}function QUs(a){Lr(a.ma.ma)?SUs(a):iq(a.Ka,a.ma.ma.oa,function(){return void SUs(a)})}
function TUs(a){var c;if("oition
        // is stringified over the wire, double quotes in it get converted to \" which the FCM server
        // does not properly handle. We can get around this by replacing internal double quotes with
        // single quotes.
        condition = condition.replace(/"/g, '\'');
        return Promise.resolve()
            .then(() => {
            // Validate the contents of the payload and options objects. Because we are now in a
            // promise, any thrown error will cause this method to return a rejected promise.
            const payloadCopy = this.validateMessagingPayload(payload);
            const optionsCopy = this.validateMessagingOptions(options);
            const request = (0, deep_copy_1.deepCopy)(payloadCopy);
            (0, deep_copy_1.deepExtend)(request, optionsCopy);
            request.condition = condition;
            return this.messagingRequestHandler.invokeRequestHandler(FCM_SEND_HOST, FCM_SEND_PATH, request);
        })
            .then((response) => {
            // Rename properties on the server response
            utils.renameProperties(response, MESSAGING_CONDITION_RESPONSE_KEYS_MAP);
            return response;
        });
    }
    /**
     * Subscribes a device to an FCM topic.
     *
     * See {@link https://firebase.google.com/docs/cloud-messaging/manage-topics#suscribe_and_unsubscribe_using_the |
     * Subscribe to a topic}
     * for code samples and detailed documentation. Optionally, you can provide an
     * array of tokens to subscribe multiple devices.
     *
     * @param registrationTokens - A token or array of registration tokens
     *   for the devices to subscribe to the topic.
     * @param topic - The topic to which to subscribe.
     *
     * @returns A promise fulfilled with the server's response after the device has been
     *   subscribed to the topic.
     */
    subscribeToTopic(registrationTokenOrTokens, topic) {
        return this.sendTopicManagementRequest(registrationTokenOrTokens, topic, 'subscribeToTopic', FCM_TOPIC_MANAGEMENT_ADD_PATH);
    }
    /**
     * Unsubscribes a device from an FCM topic.
     *
     * See {@link https://firebase.google.com/docs/cloud-messaging/admin/manage-topic-subscriptions#unsubscribe_from_a_topic |
     * Unsubscribe from a topic}
     * for code samples and detailed documentation.  Optionally, you can provide an
     * array of tokens to unsubscribe multiple devices.
     *
     * @param registrationTokens - A device registration token or an array of
     *   device registration tokens to unsubscribe from the topic.
     * @param topic - The topic from which to unsubscribe.
     *
     * @returns A promise fulfilled with the server's response after the device has been
     *   unsubscribed from the topic.
     */
    unsubscribeFromTopic(registrationTokenOrTokens, topic) {
        return this.sendTopicManagementRequest(registrationTokenOrTokens, topic, 'unsubscribeFromTopic', FCM_TOPIC_MANAGEMENT_REMOVE_PATH);
    }
    getUrlPath() {
        if (this.urlPath) {
            return Promise.resolve(this.urlPath);
        }
        return utils.findProjectId(this.app)
            .then((projectId) => {
            if (!validator.isNonEmptyString(projectId)) {
                // Assert for an explicit project ID (either via AppOptions or the cert itself).
                throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_ARGUMENT, 'Failed to determine project ID for Messaging. Initialize the '
                    + 'SDK with service account credentials or set project ID as an app option. '
                    + 'Alternatively set the GOOGLE_CLOUD_PROJECT environment variable.');
            }
            this.urlPath = `/v1/projects/${projectId}/messages:send`;
            return this.urlPath;
        });
    }
    /**
     * Helper method which sends and handles topic subscription management requests.
     *
     * @param registrationTokenOrTokens - The registration token or an array of
     *     registration tokens to unsubscribe from the topic.
     * @param topic - The topic to which to subscribe.
     * @param methodName - The name of the original method called.
     * @param path - The endpoint path to use for the request.
     *
     * @returns A Promise fulfilled with the parsed server
     *   response.
     */
    sendTopicManagementRequest(registrationTokenOrTokens, topic, methodName, path) {
        this.validateRegistrationTokensType(registrationTokenOrTokens, methodName);
        this.validateTopicType(topic, methodName);
        // Prepend the topic with /topics/ if necessary.
        topic = this.normalizeTopic(topic);
        return Promise.resolve()
            .then(() => {
            // Validate the contents of the input arguments. Because we are now in a promise, any thrown
            // error will cause this method to return a rejected promise.
            this.validateRegistrationTokens(registrationTokenOrTokens, methodName);
            this.validateTopic(topic, methodName);
            // Ensure the registration token(s) input argument is an array.
            let registrationTokensArray = registrationTokenOrTokens;
            if (validator.isString(registrationTokenOrTokens)) {
                registrationTokensArray = [registrationTokenOrTokens];
            }
            const request = {
                to: topic,
                registration_tokens: registrationTokensArray,
            };
            return this.messagingRequestHandler.invokeRequestHandler(FCM_TOPIC_MANAGEMENT_HOST, path, request);
        })
            .then((response) => {
            return mapRawResponseToTopicManagementResponse(response);
        });
    }
    /**
     * Validates the types of the messaging payload and options. If invalid, an error will be thrown.
     *
     * @param payload - The messaging payload to validate.
     * @param options - The messaging options to validate.
     */
    validateMessagingPayloadAndOptionsTypes(payload, options) {
        // Validate the payload is an object
        if (!validator.isNonNullObject(payload)) {
            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'Messaging payload must be an object with at least one of the "data" or "notification" properties.');
        }
        // Validate the options argument is an object
        if (!validator.isNonNullObject(options)) {
            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_OPTIONS, 'Messaging options must be an object.');
        }
    }
    /**
     * Validates the messaging payload. If invalid, an error will be thrown.
     *
     * @param payload - The messaging payload to validate.
     *
     * @returns A copy of the provided payload with whitelisted properties switched
     *     from camelCase to underscore_case.
     */
    validateMessagingPayload(payload) {
        const payloadCopy = (0, deep_copy_1.deepCopy)(payload);
        const payloadKeys = Object.keys(payloadCopy);
        const validPayloadKeys = ['data', 'notification'];
        let containsDataOrNotificationKey = false;
        payloadKeys.forEach((payloadKey) => {
            // Validate the payload does not contain any invalid keys
            if (validPayloadKeys.indexOf(payloadKey) === -1) {
                throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, `Messaging payload contains an invalid "${payloadKey}" property. Valid properties are ` +
                    '"data" and "notification".');
            }
            else {
                containsDataOrNotificationKey = true;
            }
        });
        // Validate the payload contains at least one of the "data" and "notification" keys
        if (!containsDataOrNotificationKey) {
            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'Messaging payload must contain at least one of the "data" or "notification" properties.');
        }
        const validatePayload = (payloadKey, value) => {
            // Validate each top-level key in the payload is an object
            if (!validator.isNonNullObject(value)) {
                throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, `Messaging payload contains an invalid value for the "${payloadKey}" property. ` +
                    'Value must be an object.');
            }
            Object.keys(value).forEach((subKey) => {
                if (!validator.isString(value[subKey])) {
                    // Validate all sub-keys have a string value
                    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, `Messaging payload contains an invalid value for the "${payloadKey}.${subKey}" ` +
                        'property. Values must be strings.');
                }
                else if (payloadKey === 'data' && /^google\./.test(subKey)) {
                    // Validate the data payload does not contain keys which start with 'google.'.
                    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, `Messaging payload contains the blacklisted "data.${subKey}" property.`);
                }
            });
        };
        if (payloadCopy.data !== undefined) {
            validatePayload('data', payloadCopy.data);
        }
        if (payloadCopy.notification !== undefined) {
            validatePayload('notification', payloadCopy.notification);
        }
        // Validate the data payload object does not contain blacklisted properties
        if ('data' in payloadCopy) {
            messaging_internal_1.BLACKLISTED_DATA_PAYLOAD_KEYS.forEach((blacklistedKey) => {
                if (blacklistedKey in payloadCopy.data) {
                    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, `Messaging payload contains the blacklisted "data.${blacklistedKey}" property.`);
                }
            });
        }
        // Convert whitelisted camelCase keys to underscore_case
        if (payloadCopy.notification) {
            utils.renameProperties(payloadCopy.notification, CAMELCASED_NOTIFICATION_PAYLOAD_KEYS_MAP);
        }
        return payloadCopy;
    }
    /**
     * Validates the messaging options. If invalid, an error will be thrown.
     *
     * @param options - The messaging options to validate.
     *
     * @returns A copy of the provided options with whitelisted properties switched
     *   from camelCase to underscore_case.
     */
    validateMessagingOptions(options) {
        const optionsCopy = (0, deep_copy_1.deepCopy)(options);
        // Validate the options object does not contain blacklisted properties
        messaging_internal_1.BLACKLISTED_OPTIONS_KEYS.forEach((blacklistedKey) => {
            if (blacklistedKey in optionsCopy) {
                throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_OPTIONS, `Messaging options contains the blacklisted "${blacklistedKey}" property.`);
            }
        });
        // Convert whitelisted camelCase keys to underscore_case
        utils.renameProperties(optionsCopy, CAMELCASE_OPTIONS_KEYS_MAP);
        // Validate the options object contains valid values for whitelisted properties
        if ('collapse_key' in optionsCopy && !validator.isNonEmptyString(optionsCopy.collapse_key)) {
            const keyName = ('collapseKey' in options) ? 'collapseKey' : 'collapse_key';
            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_OPTIONS, `Messaging options contains an invalid value for the "${keyName}" property. Value must ` +
                'be a non-empty string.');
        }
        else if ('dry_run' in optionsCopy && !validator.isBoolean(optionsCopy.dry_run)) {
            const keyName = ('dryRun' in options) ? 'dryRun' : 'dry_run';
            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_OPTIONS, `Messaging options contains an invalid value for the "${keyName}" property. Value must ` +
                'be a boolean.');
        }
        else if ('priority' in optionsCopy && !validator.isNonEmptyString(optionsCopy.priority)) {
            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_OPTIONS, 'Messaging options contains an invalid value for the "priority" property. Value must ' +
                'be a non-empty string.');
        }
        else if ('restricted_package_name' in optionsCopy &&
            !validator.isNonEmptyString(optionsCopy.restricted_package_name)) {
            const keyName = ('restrictedPackageName' in options) ? 'restrictedPackageName' : 'restricted_package_name';
            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_OPTIONS, `Messaging options contains an invalid value for the "${keyName}" property. Value must ` +
                'be a non-empty string.');
        }
        else if ('time_to_live' in optionsCopy && !validator.isNumber(optionsCopy.time_to_live)) {
            const keyName = ('timeToLive' in options) ? 'timeToLive' : 'time_to_live';
            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_OPTIONS, `Messaging options contains an invalid value for the "${keyName}" property. Value must ` +
                'be a number.');
        }
        else if ('content_available' in optionsCopy && !validator.isBoolean(optionsCopy.content_available)) {
            const keyName = ('contentAvailable' in options) ? 'contentAvailable' : 'content_available';
            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_OPTIONS, `Messaging options contains an invalid value for the "${keyName}" property. Value must ` +
                'be a boolean.');
        }
        else if ('mutable_content' in optionsCopy && !validator.isBoolean(optionsCopy.mutable_content)) {
            const keyName = ('mutableContent' in options) ? 'mutableContent' : 'mutable_content';
            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_OPTIONS, `Messaging options contains an invalid value for the "${keyName}" property. Value must ` +
                'be a boolean.');
        }
        return optionsCopy;
    }
    /**
     * Validates the type of the provided registration token(s). If invalid, an error will be thrown.
     *
     * @param registrationTokenOrTokens - The registration token(s) to validate.
     * @param method - The method name to use in error messages.
     * @param errorInfo - The error info to use if the registration tokens are invalid.
     */
    validateRegistrationTokensType(registrationTokenOrTokens, methodName, errorInfo = error_1.MessagingClientErrorCode.INVALID_ARGUMENT) {
        if (!validator.isNonEmptyArray(registrationTokenOrTokens) &&
            !validator.isNonEmptyString(registrationTokenOrTokens)) {
            throw new error_1.FirebaseMessagingError(errorInfo, `Registration token(s) provided to ${methodName}() must be a non-empty string or a ` +
                'non-empty array.');
        }
    }
    /**
     * Validates the provided registration tokens. If invalid, an error will be thrown.
     *
     * @param registrationTokenOrTokens - The registration token or an array of
     *     registration tokens to validate.
     * @param method - The method name to use in error messages.
     * @param errorInfo - The error info to use if the registration tokens are invalid.
     */
    validateRegistrationTokens(registrationTokenOrTokens, methodName, errorInfo = error_1.MessagingClientErrorCode.INVALID_ARGUMENT) {
        if (validator.isArray(registrationTokenOrTokens)) {
            // Validate the array contains no more than 1,000 registration tokens.
            if (registrationTokenOrTokens.length > 1000) {
                throw new error_1.FirebaseMessagingError(errorInfo, `Too many registration tokens provided in a single request to ${methodName}(). Batch ` +
                    'your requests to contain no more than 1,000 registration tokens per request.');
            }
            // Validate the array contains registration tokens which are non-empty strings.
            registrationTokenOrTokens.forEach((registrationToken, index) => {
                if (!validator.isNonEmptyString(registrationToken)) {
                    throw new error_1.FirebaseMessagingError(errorInfo, `Registration token provided to ${methodName}() at index ${index} must be a ` +
                        'non-empty string.');
                }
            });
        }
    }
    /**
     * Validates the type of the provided topic. If invalid, an error will be thrown.
     *
     * @param topic - The topic to validate.
     * @param method - The method name to use in error messages.
     * @param errorInfo - The error info to use if the topic is invalid.
     */
    validateTopicType(topic, methodName, errorInfo = error_1.MessagingClientErrorCode.INVALID_ARGUMENT) {
        if (!validator.isNonEmptyString(topic)) {
            throw new error_1.FirebaseMessagingError(errorInfo, `Topic provided to ${methodName}() must be a string which matches the format ` +
                '"/topics/[a-zA-Z0-9-_.~%]+".');
        }
    }
    /**
     * Validates the provided topic. If invalid, an error will be thrown.
     *
     * @param topic - The topic to validate.
     * @param method - The method name to use in error messages.
     * @param errorInfo - The error info to use if the topic is invalid.
     */
    validateTopic(topic, methodName, errorInfo = error_1.MessagingClientErrorCode.INVALID_ARGUMENT) {
        if (!validator.isTopic(topic)) {
            throw new error_1.FirebaseMessagingError(errorInfo, `Topic provided to ${methodName}() must be a string which matches the format ` +
                '"/topics/[a-zA-Z0-9-_.~%]+".');
        }
    }
    /**
     * Normalizes the provided topic name by prepending it with '/topics/', if necessary.
     *
     * @param topic - The topic name to normalize.
     *
     * @returns The normalized topic name.
     */
    normalizeTopic(topic) {
        if (!/^\/topics\//.test(topic)) {
            topic = `/topics/${topic}`;
        }
        return topic;
    }
}
exports.Messaging = Messaging;
