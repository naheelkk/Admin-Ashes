nt=undefined}else{const r=t===null||t===void 0?void 0:t.getDynamicSearchBoxContent();if(n.areDynamicSearchBoxContentEqual(r,this.previousDynamicSearchBoxContent)){n.config.msbDsbEmptyGleamInvestigation&&(n.msbDsbHost===null||n.msbDsbHost===void 0?void 0:n.msbDsbHost.logGleamSetup("DedupEarlyReturn",t,i+" DynamicSearchBoxContentEqual"));return}if(this.previousDynamicSearchBoxContent=r,r){const{attributes:n,parameters:t}=r,i=n===null||n===void 0?void 0:n.gleamFormat;switch(i){case 0:await this.setDynamicSearchBoxContentRawData(t);break;case 1:await this.setDynamicSearchBoxContentUrl(t);break;default:await this.setDynamicSearchBoxContentUrl(e)}}else this.logBackgroundTask("DsbManager_no_vm_selected"),n.config.msbDsbEmptyGleamInvestigation&&(n.msbDsbHost===null||n.msbDsbHost===void 0?void 0:n.msbDsbHost.logGleamSetup("ClearedByNullContent",t,i+" NoVmSelected")),await((l=(b=SearchAppWrapper.CortanaApp).clearDynamicContent)===null||l===void 0?void 0:l.call(b)),await((a=(k=SearchAppWrapper.CortanaApp).removeDynamicSearchBoxContent)===null||a===void 0?void 0:a.call(k)),this.previousDynamicSearchBoxContent=undefined}this.logBackgroundTask("DsbManager_setViewModelDynamicSearchBoxContent_End")}finally{r.release()}}getDynamicSearchBoxContentKeyAtShown(){return this.dynamicSearchBoxContentKeyAtShown}getInstrumentedProps(){var i,r;let t=[];return(n.msbHost===null||n.msbHost===void 0?void 0:n.msbHost.features.isMsbDsbBlendFeatureEnabled())?(t=this.selectDsbViewModels().map(n=>{var t;return(t=n.getInstrumentProps())!==null&&t!==void 0?t:[]}).reduce((n,t)=>n.concat(t),[]),(n.msbDsbSwitchHost===null||n.msbDsbSwitchHost===void 0?void 0:n.msbDsbSwitchHost.shouldShow())&&(t=t.concat(n.msbDsbSwitchHost.getDsbInstrumentProps()))):t=(r=(i=this.selectDsbViewModel())===null||i===void 0?void 0:i.getInstrumentProps())!==null&&r!==void 0?r:[],t}logBackgroundTask(t){n.logToMC("Bing_QF_BackgroundTask_lifecycle",t,"logBackgroundTask")}focus(){var n;if((n=this._dsbViewModel)!==null&&n!==void 0)return n.focus()}shouldUpdateConsumerDsbInBlendedMode(){if(n.msbDsbHost===null||n.msbDsbHost===void 0?void 0:n.msbDsbHost.isInBlendedMode())try{const t=n.LightweightStorage.getItem(u);if(t){const i=Date.now()-parseInt(t);return i>=n.DEFAULT_DSB_UPDATE_INTERVAL_MINS*n.MINS_TO_MILLIS}return!0}catch(t){return!0}else return!0}updateGleamDataPofSchema(n){var i,r,u,f,e,o;let t=(r=(i=this===null||this===void 0?void 0:this._dsbViewModel)===null||i===void 0?void 0:i.getSearchAppearanceGleamContent())===null||r===void 0?void 0:r.gleamData;const s=(o=(e=(f=(u=t===null||t===void 0?void 0:t.content)===null||u===void 0?void 0:u.taskbarSearchBox)===null||f===void 0?void 0:f.gleam)===null||e===void 0?void 0:e.hoverAction)===null||o===void 0?void 0:o.type;let h=s=="searchHome"&&!n||s=="showTooltip"&&n;t&&h&&this._dsbViewModel.setGleamDataPoFSchema(t,h)}}n.DynamicSearchManager=s}(WSB||(WSB={})),function(n){class t{constructor(t){this._page=t;this.pastMomentsContentCache={cacheTime:0,response:null};this.multiMomentsContentCache={cacheTime:0,response:null};this.dismissedMomentsContentCache={};this.DSBV2ContentCache={cacheTime:0,response:null};this.instrumentedBlendedProps=[];this.hasPendingGleamUpdate=!1;this.kValueC=n.InstrumentationCommon.KVALUE_DSB_CURRENT_DAY_CONTENT;this.kValueP=n.InstrumentationCommon.KVALUE_DSB_PAST_DAYS_CONTENT;this.kValueV2=n.InstrumentationCommon.KVALUE_DSB_V2_CONTENT;this.kValueM=n.InstrumentationCommon.KVALUE_DSB_MERGED_CONTENT;this.isVisible=!1;this.isDSBMergedCallSuccess=0;this.dwellStartTime=-1;this.dwellEndTime=-1;this.dwellTime=-1;this.DataModelStorageKey=n.config.dsbCacheKey;this.PastMomentsDataModelStorageKey=n.config.dsbFlipperCacheKey;this.DismissedMomentsStorageKey=n.config.dsbDismissCacheKey;this.DSBV2DataModelStorageKey=n.config.dsbV2CacheKey;this.codexStatusCacheKey="userCodexStatus";this.currentUserIDCacheKey="currentDSBUserId";this.serverIG="";this.DSBSearchCallStatusCacheKey="DSBSearchCallStatus";this.DSBSearchCallStatus="None";this.dsbUser=null;this.DSBGleamBlobCacheKey="wsbGleamBlobCacheMap";this.resetActiveStatus();this.loadDynamicSearcxpect(
        gensync({
          sync: function(a, b, c, d, e, f, g) {
            throwTestError();
          },
          async: throwTestError,
        }).length
      ).toBe(7);
    });

    test("explicit arity", () => {
      expect(
        gensync({
          arity: 3,
          sync: throwTestError,
          async: throwTestError,
        }).length
      ).toBe(3);
    });
  });

  describe("'sync' handler", async () => {
    test("success", async () => {
      const fn = gensync({
        sync: (...args) => JSON.stringify(args),
      });

      await expectResult(fn, 42, { value: "[42]", expectSync: true });
    });

    test("failure", async () => {
      const fn = gensync({
        sync: (...args) => {
          throw JSON.stringify(args);
        },
      });

      await expectResult(fn, 42, { error: "[42]", expectSync: true });
    });
  });

  describe("'async' handler", async () => {
    test("success", async () => {
      const fn = gensync({
        sync: throwTestError,
        async: (...args) => Promise.resolve(JSON.stringify(args)),
      });

      await expectResult(fn, 42, { value: "[42]" });
    });

    test("failure", async () => {
      const fn = gensync({
        sync: throwTestError,
        async: (...args) => Promise.reject(JSON.stringify(args)),
      });

      await expectResult(fn, 42, { error: "[42]" });
    });
  });

  describe("'errback' sync handler", async () => {
    test("success", async () => {
      const fn = gensync({
        sync: throwTestError,
        errback: (...args) => args.pop()(null, JSON.stringify(args)),
      });

      await expectResult(fn, 42, { value: "[42]", syncErrback: true });
    });

    test("failure", async () => {
      const fn = gensync({
        sync: throwTestError,
        errback: (...args) => args.pop()(JSON.stringify(args)),
      });

      await expectResult(fn, 42, { error: "[42]", syncErrback: true });
    });
  });

  describe("'errback' async handler", async () => {
    test("success", async () => {
      const fn = gensync({
        sync: throwTestError,
        errback: (...args) =>
          process.nextTick(() => args.pop()(null, JSON.stringify(args))),
      });

      await expectResult(fn, 42, { value: "[42]" });
    });

    test("failure", async () => {
      const fn = gensync({
        sync: throwTestError,
        errback: (...args) =>
          process.nextTick(() => args.pop()(JSON.stringify(args))),
      });

      await expectResult(fn, 42, { error: "[42]" });
    });
  });
});

describe("gensync(function* () {})", () => {
  test("sync throw before body", async () => {
    const fn = gensync(function*(arg = throwTestError()) {});

    await expectResult(fn, undefined, {
      error: TEST_ERROR,
      syncErrback: true,
    });
  });

  test("sync throw inside body", async () => {
    const fn = gensync(function*() {
      throwTestError();
    });

    await expectResult(fn, undefined, {
      error: TEST_ERROR,
      syncErrback: true,
    });
  });

  test("async throw inside body", async () => {
    const fn = gensync(function*() {
      const val = yield* doSuccess();
      throwTestError();
    });

    await expectResult(fn, undefined, {
      error: TEST_ERROR,
    });
  });

  test("error inside body", async () => {
    const fn = gensync(function*() {
      yield* doError();
    });

    await expectResult(fn, undefined, {
      error: DID_ERROR,
      expectSync: true,
      syncErrback: false,
    });
  });

  test("successful return value", async () => {
    const fn = gensync(function*() {
      const value = yield* doSuccess();

      expect(value).toBe(42);

      return 84;
    });

    await expectResult(fn, undefined, {
      value: 84,
      expectSync: true,
      syncErrback: false,
    });
  });

  test("successful final value", async () => {
    const fn = gensync(function*() {
      return 42;
    });

    await expectResult(fn, undefined, {
      value: 42,
      expectSync: true,
    });
  });

  test("yield unexpected object", async () => {
    const fn = gensync(function*() {
      yield {};
    });

    try {
      await fn.async();

      throwTestError();
    } catch (err) {
      expect(err.message).toMatch(
        /Got unexpected yielded value in gensync generator/
      );
      expect(err.code).toBe("GENSYNC_EXPECTED_START");
    }
  });

  test("yield suspend yield", async () => {
    const fn = gensync(function*() {
      yield Symbol.for("gensync:v1:start");

      // Should be "yield*" for no error.
      yield {};
    });

    try {
      await fn.async();

      throwTestError();
    } catch (err) {
      expect(err.message).toMatch(/Expected GENSYNC_SUSPEND, got {}/);
      expect(err.code).toBe("GENSYNC_EXPECTED_SUSPEND");
    }
  });

  test("yield suspend return", async () => {
    const fn = gensync(function*() {
      yield Symbol.for("gensync:v1:start");

      // Should be "yield*" for no error.
      return {};
    });

    try {
      await fn.async();

      throwTestError();
    } catch (err) {
      expect(err.message).toMatch(/Unexpected generator completion/);
      expect(err.code).toBe("GENSYNC_EXPECTED_SUSPEND");
    }
  });
});

describe("gensync.all()", () => {
  test("success", async () => {
    const fn = gensync(function*() {
      const result = yield* gensync.all([doSuccess(), doSuccess()]);

      expect(result).toEqual([42, 42]);
    });

    await expectResult(fn, undefined, {
      value: undefined,
      expectSync: true,
      syncErrback: false,
    });
  });

  test("error first", async () => {
    const fn = gensync(function*() {
      yield* gensync.all([doError(), doSuccess()]);
    });

    await expectResult(fn, undefined, {
      error: DID_ERROR,
      expectSync: true,
      syncErrback: false,
    });
  });

  test("error last", async () => {
    const fn = gensync(function*() {
      yield* gensync.all([doSuccess(), doError()]);
    });

    await expectResult(fn, undefined, {
      error: DID_ERROR,
      expectSync: true,
      syncErrback: false,
    });
  });

  test("empty list", async () => {
    const fn = gensync(function*() {
      yield* gensync.all([]);
    });

    await expectResult(fn, undefined, {
      value: undefined,
      expectSync: true,
      syncErrback: false,
    });
  });
});

describe("gensync.race()", () => {
  test("success", async () => {
    const fn = gensync(function*() {
      const result = yield* gensync.race([doSuccess(), doError()]);

      expect(result).toEqual(42);
    });

    await expectResult(fn, undefined, {
      value: undefined,
      expectSync: true,
      syncErrback: false,
    });
  });

  test("error", async () => {
    const fn = gensync(function*() {
      yield* gensync.race([doError(), doSuccess()]);
    });

    await expectResult(fn, undefined, {
      error: DID_ERROR,
      expectSync: true,
      syncErrback: false,
    });
  });
});
