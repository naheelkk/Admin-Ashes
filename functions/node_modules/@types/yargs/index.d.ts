// The following TSLint rules have been disabled:
// unified-signatures: Because there is useful information in the argument names of the overloaded signatures

// Convention:
// Use 'union types' when:
//  - parameter types have similar signature type (i.e. 'string | ReadonlyArray<string>')
//  - parameter names have the same semantic meaning (i.e. ['command', 'commands'] , ['key', 'keys'])
//    An example for not using 'union types' is the declaration of 'env' where `prefix` and `enable` parameters
//    have different semantics. On the other hand, in the declaration of 'usage', a `command: string` parameter
//    has the same semantic meaning with declaring an overload method by using `commands: ReadonlyArray<string>`,
//    thus it's preferred to use `command: string | ReadonlyArray<string>`
// Use parameterless declaration instead of declaring all parameters optional,
// when all parameters are optional and more than one

import { Configuration, DetailedArguments } from "yargs-parser";

declare namespace yargs {
    type BuilderCallback<T, R> =
        | ((args: Argv<T>) => PromiseLike<Argv<R>>)
        | ((args: Argv<T>) => Argv<R>)
        | ((args: Argv<T>) => void);

    type ParserConfigurationOptions = Configuration & {
        /** Sort commands alphabetically. Default is `false` */
        "sort-commands": boolean;
    };

    /**
     * The type parameter `T` is the expected shape of the parsed options.
     * `Arguments<T>` is those options plus `_` and `$0`, and an indexer falling
     * back to `unknown` for unknown options.
     *
     * For the return type / `argv` property, we create a mapped type over
     * `Arguments<T>` to simplify the inferred type signature in client code.
     */
    interface Argv<T = {}> {
        (args?: readonly string[] | string, cwd?: string): Argv<T>;

        /**
         * Set key names as equivalent such that updates to a key will propagate to aliases and vice-versa.
         *
         * Optionally `.alias()` can take an object that maps keys to aliases.
         * Each key of this object should be the canonical version of the option, and each value should be a string or an array of strings.
         */
        // Aliases for previously declared options can inherit the types of those options.
        alias<K1 extends keyof T, K2 extends string>(
            shortName: K1,
            longName: K2 | readonly K2[],
        ): Argv<T & { [key in K2]: T[K1] }>;
        alias<K1 extends keyof T, K2 extends string>(
            shortName: K2,
            longName: K1 | readonly K1[],
        ): Argv<T & { [key in K2]: T[K1] }>;
        alias(shortName: string | readonly string[], longName: string | readonly string[]): Argv<T>;
        alias(aliases: { [shortName: string]: string | readonly string[] }): Argv<T>;

        /**
         * Get the arguments as a plain old object.
         *
         * Arguments without a corresponding flag show up in the `argv._` array.
         *
         * The script name or node command is available at `argv.$0` similarly to how `$0` works in bash or perl.
         *
         * If `yargs` is executed in an environment that embeds node and there's no script name (e.g. Electron or nw.js),
         * it will ignore the first parameter since it expects it to be the script name. In order to override
         * this behavior, use `.parse(process.argv.slice(1))` instead of .argv and the first parameter won't be ignored.
         */
        argv:
            | { [key in keyof Arguments<T> as key | CamelCaseKey<key>]: Arguments<T>[key] }
            | Promise<{ [key in keyof Arguments<T> as key | CamelCaseKey<key>]: Arguments<T>[key] }>;

        /**
         * Tell the parser to interpret `key` as an array.
         * If `.array('foo')` is set, `--foo foo bar` will be parsed as `['foo', 'bar']` rather than as `'foo'`.
         * Also, if you use the option multiple times all the values will be flattened in one array so `--foo foo --foo bar` will be parsed as `['foo', 'bar']`
         *
         * When the option is used with a positional, use `--` to tell `yargs` to stop adding values to the array.
         */
        array<K extends keyof T>(key: K | readonly K[]): Argv<Omit<T, K> & { [key in K]: ToArray<T[key]> }>;
        array<K extends string>(
            key: K | readonly K[],
        ): Argv<T & { [key in K]: Array<string | number> | undefined }>;

        /**
         * Interpret `key` as a boolean. If a non-flag option follows `key` in `process.argv`, that string won't get set as the value of `key`.
         *
         * `key` will default to `false`, unless a `default(key, undefined)` is explicitly set.
         *
         * If `key` is an array, interpret all the elements as booleans.
         */
        boolean<K extends keyof T>(key: K | readonly K[]): Argv<Omit<T, K> & { [key in K]: boolean | undefined }>;
        boolean<K extends string>(key: K | readonly K[]): Argv<T & { [key in K]: boolean | undefined }>;

        /**
         * Check that certain conditions are met in the provided arguments.
         * @param func Called with two arguments, the parsed `argv` hash and an array of options and their aliases.
         * If `func` throws or returns a non-truthy value, show the thrown error, usage information, and exit.
         * @param global Indicates whether `check()` should be enabled both at the top-level and for each sub-command.
         */
        check(func: (argv: Arguments<T>, aliases: { [alias: string]: string }) => any, global?: boolean): Argv<T>;

        /**
         * Limit valid values for key to a predefined set of choices, given as an array or as an individual value.
         * If this method is called multiple times, all enumerated values will be merged together.
         * Choices are generally strings or numbers, and value matching is case-sensitive.
         *
         * Optionally `.choices()` can take an object that maps multiple keys to their choices.
         *
         * Choices can also be specified as choices in the object given to `option()`.
         */
        choices<K extends keyof T, C extends readonly any[]>(
            key: K,
            values: C,
        ): Argv<Omit<T, K> & { [key in K]: C[number] | undefined }>;
        choices<K extends string, C extends readonly any[]>(
            key: K,
            values: C,
        ): Argv<T & { [key in K]: C[number] | undefined }>;
        choices<C extends { [key: string]: readonly any[] }>(
            choices: C,
        ): Argv<Omit<T, keyof C> & { [key in keyof C]: C[key][number] | undefined }>;

        /**
         * Provide a synchronous function to coerce or transform the value(s) given on the command line for `key`.
         *
         * The coercion function should accept one argument, representing the parsed value from the command line, and should return a new value or throw an error.
         * The returned value will be used as the value for `key` (or one of its aliases) in `argv`.
         *
         * If the function throws, the error will be treated as a validation failure, delegating to either a custom `.fail()` handler or printing the error message in the console.
         *
         * Coercion will be applied to a value after all other modifications, such as `.normalize()`.
         *
         * Optionally `.coerce()` can take an object that maps several keys to their respective coercion function.
         *
         * You can also map the same function to several keys at one time. Just pass an array of keys as the first argument to `.coerce()`.
         *
         * If you are using dot-notion or arrays, .e.g., `user.email` and `user.password`, coercion will be applied to the final object that has been parsed
         */
        coerce<K extends keyof T, V>(
            key: K | readonly K[],
            func: (arg: any) => V,
        ): Argv<Omit<T, K> & { [key in K]: V | undefined }>;
        coerce<K extends string, V>(
            key: K | readonly K[],
            func: (arg: any) => V,
        ): Argv<T & { [key in K]: V | undefined }>;
        coerce<O extends { [key: string]: (arg: any) => any }>(
            opts: O,
        ): Argv<Omi                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    interface Options {
        /** string or array of strings, alias(es) for the canonical option key, see `alias()` */
        alias?: string | readonly string[] | undefined;
        /** boolean, interpret option as an array, see `array()` */
        array?: boolean | undefined;
        /**  boolean, interpret option as a boolean flag, see `boolean()` */
        boolean?: boolean | undefined;
        /** value or array of values, limit valid option arguments to a predefined set, see `choices()` */
        choices?: Choices | undefined;
        /** function, coerce or transform parsed command line values into another value, see `coerce()` */
        coerce?: ((arg: any) => any) | undefined;
        /** boolean, interpret option as a path to a JSON config file, see `config()` */
        config?: boolean | undefined;
        /** function, provide a custom config parsing function, see `config()` */
        configParser?: ((configPath: string) => object) | undefined;
        /** string or object, require certain keys not to be set, see `conflicts()` */
        conflicts?: string | readonly string[] | { [key: string]: string | readonly string[] } | undefined;
        /** boolean, interpret option as a count of boolean flags, see `count()` */
        count?: boolean | undefined;
        /** value, set a default value for the option, see `default()` */
        default?: any;
        /** string, use this description for the default value in help content, see `default()` */
        defaultDescription?: string | undefined;
        /**
         *  @deprecated since version 6.6.0
         *  Use 'demandOption' instead
         */
        demand?: boolean | string | undefined;
        /** boolean or string, mark the argument as deprecated, see `deprecateOption()` */
        deprecate?: boolean | string | undefined;
        /** boolean or string, mark the argument as deprecated, see `deprecateOption()` */
        deprecated?: boolean | string | undefined;
        /** boolean or string, demand the option be given, with optional error message, see `demandOption()` */
        demandOption?: boolean | string | undefined;
        /** string, the option description for help content, see `describe()` */
        desc?: string | undefined;
        /** string, the option description for help content, see `describe()` */
        describe?: string | undefined;
        /** string, the option description for help content, see `describe()` */
        description?: string | undefined;
        /** boolean, indicate that this key should not be reset when a command is invoked, see `global()` */
        global?: boolean | undefined;
        /** string, when displaying usage instructions place the option under an alternative group heading, see `group()` */
        group?: string | undefined;
        /** don't display option in help output. */
        hidden?: boolean | undefined;
        /**  string or object, require certain keys to be set, see `implies()` */
        implies?: string | readonly string[] | { [key: string]: string | readonly string[] } | undefined;
        /** number, specify how many arguments should be consumed for the option, see `nargs()` */
        nargs?: number | undefined;
        /** boolean, apply path.normalize() to the option, see `normalize()` */
        normalize?: boolean | undefined;
        /** boolean, interpret option as a number, `number()` */
        number?: boolean | undefined;
        /**
         *  @deprecated since version 6.6.0
         *  Use 'demandOption' instead
         */
        require?: boolean | string | undefined;
        /**
         *  @deprecated since version 6.6.0
         *  Use 'demandOption' instead
         */
        required?: boolean | string | undefined;
        /** boolean, require the option be specified with a value, see `requiresArg()` */
        requiresArg?: boolean | undefined;
        /** boolean, skips validation if the option is present, see `skipValidation()` */
        skipValidation?: boolean | undefined;
        /** boolean, interpret option as a string, see `string()` */
        string?: boolean | undefined;
        type?: "array" | "count" | PositionalOptionsType | undefined;
    }

    interface PositionalOptions {
        /** string or array of strings, see `alias()` */
        alias?: string | readonly string[] | undefined;
        /** boolean, interpret option as an array, see `array()` */
        array?: boolean | undefined;
        /** value or array of values, limit valid option arguments to a predefined set, see `choices()` */
        choices?: Choices | undefined;
        /** function, coerce or transform parsed command line values into another value, see `coerce()` */
        coerce?: ((arg: any) => any) | undefined;
        /** string or object, require certain keys not to be set, see `conflicts()` */
        conflicts?: string | readonly string[] | { [key: string]: string | readonly string[] } | undefined;
        /** value, set a default value for the option, see `default()` */
        default?: any;
        /** boolean or string, demand the option be given, with optional error message, see `demandOption()` */
        demandOption?: boolean | string | undefined;
        /** string, the option description for help content, see `describe()` */
        desc?: string | undefined;
        /** string, the option description for help content, see `describe()` */
        describe?: string | undefined;
        /** string, the option description for help content, see `describe()` */
        description?: string | undefined;
        /** string or object, require certain keys to be set, see `implies()` */
        implies?: string | readonly string[] | { [key: string]: string | readonly string[] } | undefined;
        /** boolean, apply path.normalize() to the option, see normalize() */
        normalize?: boolean | undefined;
        type?: PositionalOptionsType | undefined;
    }

    // not implemented: yargs camelizes '_', but only if there's a '-' in the arg name
    // not implemented: yargs decamelizes (converts fooBar to foo-bar)

    /** Convert literal string types like 'foo-bar' to 'FooBar' */
    type PascalCase<S extends string> = string extends S ? string
        : S extends `${infer T}-${infer U}` ? `${Capitalize<T>}${PascalCase<U>}`
        : Capitalize<S>;

    /** Convert literal string types like 'foo-bar' to 'fooBar' */
    type CamelCase<S extends string> = string extends S ? string
        : S extends `${infer T}-${infer U}` ? `${T}${PascalCase<U>}`
        : S;

    /** Convert literal string types like 'foo-bar' to 'fooBar', allowing all `PropertyKey` types */
    type CamelCaseKey<K extends PropertyKey> = K extends string ? Exclude<CamelCase<K>, ""> : K;

    /** Remove keys K in T */
    type Omit<T, K> = { [key in Exclude<keyof T, K>]: T[key] };

    /** Remove undefined as a possible value for keys K in T */
    type Defined<T, K extends keyof T> = Omit<T, K> & { [key in K]: Exclude<T[key], undefined> };

    /** Convert T to T[] and T | undefined to T[] | undefined */
    type ToArray<T> = Array<Exclude<T, undefined>> | Extract<T, undefined>;

    /** Gives string[] if T is an array type, otherwise string. Preserves | undefined. */
    type ToString<T> = (Exclude<T, undefined> extends any[] ? string[] : string) | Extract<T, undefined>;

    /** Gives number[] if T is an array type, otherwise number. Preserves | undefined. */
    type ToNumber<T> = (Exclude<T, undefined> extends any[] ? number[] : number) | Extract<T, undefined>;

    // prettier-ignore
    type InferredOptionType<O extends Options | PositionalOptions> =
        // Handle special cases first
        O extends ({ coerce: (arg: any) => infer T }) ? IsRequiredOrHasDefault<O> extends true ? T : T | undefined
            : O extends (
                | { type: "count"; default: infer D }
                | { count: true; default: infer D }
            ) ? number | Exclude<D, undefined>
            : O extends (
                | { type: "count" }
                | { count: true }
            ) ? number
            // Try to infer type with InferredOptionTypePrimitive
            : IsUnknown<InferredOptionTypePrimitive<O>> extends false ? InferredOptionTypePrimitive<O>
            // Use the type of `default` as the last resort
            : O extends ({ default: infer D }) ? Exclude<D, undefined>
            : unknown;

    type Alias<O extends Options | PositionalOptions> = O extends { alias: infer T }
        ? T extends Exclude<string, T> ? { [key in T]: InferredOptionType<O> } : {}
        : {};

    // prettier-ignore
    type IsRequiredOrHasDefault<O extends Options | PositionalOptions> = O extends (
        | { required: string | true }
        | { require: string | true }
        | { demand: string | true }
        | { demandOption: string | true }
        | { default: {} }
    ) ? true
        : false;

    type IsAny<T> = 0 extends (1 & T) ? true : false;
    // prettier-ignore
    type IsUnknown<T> = IsAny<T> extends true ? false
        : unknown extends T ? true
        : false;

    // prettier-ignore
    type InferredOptionTypePrimitive<O extends Options | PositionalOptions> = O extends { default: infer D }
        ? IsRequiredOrHasDefault<O> extends true ? InferredOptionTypeInner<O> | Exclude<D, undefined>
        : InferredOptionTypeInner<O> | D
        : IsRequiredOrHasDefault<O> extends true ? InferredOptionTypeInner<O>
        : InferredOptionTypeInner<O> | undefined;

    // prettier-ignore
    type InferredOptionTypeInner<O extends Options | PositionalOptions> = O extends
        { type: "array"; choices: ReadonlyArray<infer C> } ? C[]
        : O extends { type: "array"; string: true } ? string[]
        : O extends { type: "array"; number: true } ? number[]
        : O extends { type: "array"; normalize: true } ? string[]
        : O extends { array: true; choices: ReadonlyArray<infer C> } ? C[]
        : O extends { array: true; type: "string" } ? string[]
        : O extends { array: true; type: "number" } ? number[]
        : O extends { array: true; string: true } ? string[]
        : O extends { array: true; number: true } ? number[]
        : O extends { array: true; normalize: true } ? string[]
        : O extends { choices: ReadonlyArray<infer C> } ? C
        : O extends { type: "array" } ? Array<string | number>
        : O extends { type: "boolean" } ? boolean
        : O extends { type: "number" } ? number
        : O extends { type: "string" } ? string
        : O extends { array: true } ? Array<string | number>
        : O extends { boolean: true } ? boolean
        : O extends { number: true } ? number
        : O extends { string: true } ? string
        : O extends { normalize: true } ? string
        : unknown;

    type InferredOptionTypes<O extends { [key: string]: Options }> = { [key in keyof O]: InferredOptionType<O[key]> };

    interface CommandModule<T = {}, U = {}> {
        /** array of strings (or a single string) representing aliases of `exports.command`, positional args defined in an alias are ignored */
        aliases?: readonly string[] | string | undefined;
        /** object declaring the options the command accepts, or a function accepting and returning a yargs instance */
        builder?: CommandBuilder<T, U> | undefined;
        /** string (or array of strings) that executes this command when given on the command line, first string may contain positional args */
        command?: readonly string[] | string | undefined;
        /** boolean (or string) to show deprecation notice */
        deprecated?: boolean | string | undefined;
        /** string used as the description for the command in help text, use `false` for a hidden command */
        describe?: string | false | undefined;
        /** a function which will be passed the parsed argv. */
        handler: (args: ArgumentsCamelCase<U>) => void | Promise<void>;
    }

    type ParseCallback<T = {}> = (
        err: Error | undefined,
        argv: ArgumentsCamelCase<T>,
        output: string,
    ) => void | Promise<void>;
    type CommandBuilder<T = {}, U = {}> =
        | { [key: string]: Options }
        | ((args: Argv<T>) => Argv<U>)
        | ((args: Argv<T>) => PromiseLike<Argv<U>>);
    type SyncCompletionFunction = (current: string, argv: any) => string[];
    type AsyncCompletionFunction = (
        current: string,
        argv: any,
        done: (completion: readonly string[]) => void,
    ) => void;
    type PromiseCompletionFunction = (current: string, argv: any) => Promise<string[]>;
    type FallbackCompletionFunction = (
        current: string,
        argv: any,
        completionFilter: (onCompleted?: CompletionCallback) => any,
        done: (completions: string[]) => any,
    ) => void;
    type MiddlewareFunction<T = {}> = (args: ArgumentsCamelCase<T>) => void | Promise<void>;
    type Choices = ReadonlyArray<string | number | true | undefined>;
    type PositionalOptionsType = "boolean" | "number" | "string";
    type CompletionCallback = (err: Error | null, completions: string[] | undefined) => void;
}

declare var yargs: yargs.Argv;
export = yargs;
