import _ = require("../index");
// eslint-disable-next-line @definitelytyped/strict-export-declare-modifiers
type GlobalPartial<T> = Partial<T>;
declare module "../index" {
    type Omit<T, K extends keyof any> = Pick<T, Exclude<keyof T, K>>;
    type PartialObject<T> = GlobalPartial<T>;
    type Many<T> = T | readonly T[];
    type ImpChain<T> =
        T extends { __trapAny: any } ? Collection<any> & Function<any> & Object<any> & Primitive<any> & String :
        T extends null | undefined ? never :
        T extends string | null | undefined ? String :
        T extends (...args: any) => any ? Function<T> :
        T extends List<infer U> | null | undefined ? Collection<U> :
        T extends object | null | undefined ? Object<T> :
        Primitive<T>;
    type ExpChain<T> =
        T extends { __trapAny: any } ? CollectionChain<any> & FunctionChain<any> & ObjectChain<any> & PrimitiveChain<any> & StringChain :
        T extends null | undefined ? never :
        T extends string ? StringChain :
        T extends string | null | undefined ? StringNullableChain :
        T extends (...args: any) => any ? FunctionChain<T> :
        T extends List<infer U> | null | undefined ? CollectionChain<U> :
        T extends object | null | undefined ? ObjectChain<T> :
        PrimitiveChain<T>;
    interface LoDashStatic {
        /**
        * Creates a lodash object which wraps value to enable implicit method chain sequences.
        * Methods that operate on and return arrays, collections, and functions can be chained together.
        * Methods that retrieve a single value or may return a primitive value will automatically end the
        * chain sequence and return the unwrapped value. Otherwise, the value must be unwrapped with value().
        *
        * Explicit chain sequences, which must be unwrapped with value(), may be enabled using _.chain.
        *
        * The execution of chained methods is lazy, that is, it's deferred until value() is
        * implicitly or explicitly called.
        *
        * Lazy evaluation allows several methods to support shortcut fusion. Shortcut fusion
        * is an optimization to merge iteratee calls; this avoids the creation of intermediate
        * arrays and can greatly reduce the number of iteratee executions. Sections of a chain
        * sequence qualify for shortcut fusion if the section is applied to an array and iteratees
        * accept only one argument. The heuristic for whether a section qualifies for shortcut
        * fusion is subject to change.
        *
        * Chaining is supported in custom builds as long as the value() method is directly or
        * indirectly included in the build.
        *
        * In addition to lodash methods, wrappers have Array and String methods.
        * The wrapper Array methods are:
        * concat, join, pop, push, shift, sort, splice, and unshift.
        * The wrapper String methods are:
        * replace and split.
        *
        * The wrapper methods that support shortcut fusion are:
        * at, compact, drop, dropRight, dropWhile, filter, find, findLast, head, initial, last,
        * map, reject, reverse, slice, tail, take, takeRight, takeRightWhile, takeWhile, and toArray
        *
        * The chainable wrapper methods are:
        * after, ary, assign, assignIn, assignInWith, assignWith, at, before, bind, bindAll, bindKey,
        * castArray, chain, chunk, commit, compact, concat, conforms, constant, countBy, create,
        * curry, debounce, defaults, defaultsDeep, defer, delay, difference, differenceBy, differenceWith,
        * drop, dropRight, dropRightWhile, dropWhile, extend, extendWith, fill, filter, flatMap,
        * flatMapDeep, flatMapDepth, flatten, flattenDeep, flattenDepth, flip, flow, flowRight,
        * fromPairs, functions, functionsIn, groupBy, initial, intersection, intersectionBy, intersectionWith,
        * invert, invertBy, invokeMap, iteratee, keyBy, keys, keysIn, map, mapKeys, mapValues,
        * matches, matchesProperty, memoize, merge, mergeWith, method, methodOf, mixin, negate,
        * nthArg, omit, omitBy, once, orderBy, over, overArgs, overEvery, overSome, partial, partialRight,
        * partition, pick, pickBy, plant, property, propertyOf, pull, pullAll, pullAllBy, pullAllWith, pullAt,
        * push, range, rangeRight, rearg, reject, remove, rest, reverse, sampleSize, set, setWith,
        * shuffle, slice, sort, sortBy, sortedUniq, sortedUniqBy, splice, spread, tail, take,
        * takeRight, takeRightWhile, takeWhile, tap, throttle, thru, toArray, toPairs, toPairsIn,
        * toPath, toPlainObject, transform, unary, union, unionBy, unionWith, uniq, uniqBy, uniqWith,
        * unset, unshift, unzip, unzipWith, update, updateWith, values, valuesIn, without, wrap,
        * xor, xorBy, xorWith, zip, zipObject, zipObjectDeep, and zipWith.
        *
        * The wrapper methods that are not chainable by default are:
        * add, attempt, camelCase, capitalize, ceil, clamp, clone, cloneDeep, cloneDeepWith, cloneWith,
        * conformsTo, deburr, defaultTo, divide, each, eachRight, endsWith, eq, escape, escapeRegExp,
        * every, find, findIndex, findKey, findLast, findLastIndex, findLastKey, first, floor, forEach,
        * forEachRight, forIn, forInRight, forOwn, forOwnRight, get, gt, gte, has, hasIn, head,
        * identity, includes, indexOf, inRange, invoke, isArguments, isArray, isArrayBuffer,
        * isArrayLike, isArrayLikeObject, isBoolean, isBuffer, isDate, isElement, isEmpty, isEqual, isEqualWith,
        * isError, isFinite, isFunction, isInteger, isLength, isMap, isMatch, isMatchWith, isNaN,
        * isNative, isNil, isNull, isNumber, isObject, isObjectLike, isPlainObject, isRegExp,
        * isSafeInteger, isSet, isString, isUndefined, isTypedArray, isWeakMap, isWeakSet, join,
        * kebabCase, last, lastIndexOf, lowerCase, lowerFirst, lt, lte, max, maxBy, mean, meanBy,
        * min, minBy, multiply, noConflict, noop, now, nth, pad, padEnd, padStart, parseInt, pop,
        * random, reduce, reduceRight, repeat, result, round, runInContext, sample, shift, size,
        * snakeCase, some, sortedIndex, sortedIndexBy, sortedLastIndex, sortedLastIndexBy, startCase,
        * startsWith, stubArray, stubFalse, stubObject, stubString, stubTrue, subtract, sum, sumBy,
        * template, times, toFinite, toInteger, toJSON, toLength, toLower, toNumber, toSafeInteger,
        * toString, toUpper, trim, trimEnd, trimStart, truncate, unescape, uniqueId, upperCase,
        * upperFirst, value, and words.
        **/
        <TrapAny extends { __trapAny: any }>(value: TrapAny): Collection<any> & Function<any> & Object<any> & Primitive<any> & String;
        <T extends null | undefined>(value: T): Primitive<T>;
        (value: string | null | undefined): String;
        <T extends (...args: any) => any>(value: T): Function<T>;
        <T = any>(value: List<T> | null | undefined): Collection<T>;
        <T extends object>(value: T | null | undefined): Object<T>;
        <T>(value: T): Primitive<T>;
        /**
        * The semantic version number.
        **/
        VERSION: string;
        /**
        * By default, the template delimiters used by Lo-Dash are similar to those in embedded Ruby
        * (ERB). Change the following template settings to use alternative delimiters.
        **/
        templateSettings: TemplateSettings;
    }
    /**
    * By default, the template delimiters used by Lo-Dash are similar to those in embedded Ruby
    * (ERB). Change the following template settings to use alternative delimiters.
    **/
    interface TemplateSettings {
        /**
        * The "escape" delimiter.
        **/
        escape?: RegExp | undefined;
        /**
        * The "evaluate" delimiter.
        **/
        evaluate?: RegExp | undefined;
        /**
        * An object to import into the template as local variables.
        */
        imports?: Dictionary<any> | undefined;
        /**
        * The "interpolate" delimiter.
        */
        interpolate?: RegExp | undefined;
        /**
        * Used to reference the data object in the template text.
        */n˘W≠   `˛ˇˇˇ(SbÑ„Ç         ±`˛ˇˇˇDa÷L  M  (§c       @    Ωe  
    ^   ë      0THê`<   ëEa        Dì`    î`   RcÆ∂⁄Ö   brands  ïj          õ{ù»«/¯  «/¯p˘é≠  `˛ˇˇˇ(SbÑ„Ç          A±`˛ˇˇˇDa(M  vM  ïñb       óe   
     _   í      0TL¥`D   ≠
ea        Dy`    u`   RcFX∫   Trident RbÇ≤ä   MSIEk          »c˘ õé» «d˘¯ö»«d˘¯≠  `˛ˇˇˇ(SbÑ„Ç         -`˛ˇˇˇDaåM  ﬁM  (§b       @ Ωe        `   ì      0TÙ¥`í  ≠
âa        Dy`    4u`   Rc~‘ıâ   Safari  Rc~
·@   Coast   RcÓg    Opera   RbÚƒé   EdgeReŒô7   Microsoft Edge  RbFD1G   Edg/RbûÉ}   OPR RcJ˜_¿   Firefox Rc&ô   FxiOS   Rb⁄≈î   SilkRc‚è™N   Android ÿ          » «d˘¯ õæ»c˘öµ»c˘õé»«d˘¯öû»c˘õé»«d˘¯
öá»c˘õé»«d˘¯öp»c˘õ»«d˘¯é»«d˘¯öP»c˘õ»«d˘¯é»«d˘¯ö0»«d˘¯ö$»«d˘¯ö»	«d˘¯ ö»
«d˘¯"V≠   `˛ˇˇˇ(SbÑ„Ç         1`˛ˇˇˇDaÙM  íO  ($§g$       @ @ @ @ @ @ Ωe        a   î      0Tx¥`û   ≠
—a        Dy`    u`
   Rc~˛(   ChromiumRcv·xR   Chrome  Rc™Ò–   CriOS   •Ωv          »c˘ õ» «d˘¯é<»«d˘¯ö»«d˘¯õ»c˘õé»«d˘¯
Vö»«d˘¯≠ `˛ˇˇˇ(SbÑ„Ç         `˛ˇˇˇDa®O  TP  (§d       @ @    Ωe        b   ï      0T`    –a:(  R(  êîñe        c          0T`    óQb      Ma. ac(  g(  Iîñe         d   À      0T`    ó˘aw(  ß(  ëîñe        e   Ã      0T`    ó‘aj)  n)  íîñe         f   Õ      0T<¥`"   ≠
	a        Dy`    u`   @SbÑ„Ç        ´ A´ Å´b&   Êˇ Êˇ Rb∫8¸   Va  `˛ˇˇˇ1	aÙR  jS  (0T<ì`$   î9	a        Dñ`    ó`    g          ö»c˘ %%≠  `˛ˇˇˇ(SbÑ„Ç         I`˛ˇˇˇDa0S  hS  -	§b          Ωe        h   À      g          á ˘%%Ñ ≠   `˛ˇˇˇìîa       ïe       g   Œ      5	0T`    Ia¡)  *  §ëïe        i   ñ      0TD¥`8   ≠
a	a        Dy`    u`   I˘Rbö8°D   Ba  i          *o ˘ùö 4˘)4≠`˛ˇˇˇ(SbÑ·Ç         £`˛ˇˇˇ £a2T  ÄT  (§b       Q  Ωe       j   œ      0T0¥`   ≠
Å	a        Dy`    u`   Ñd           4  ≠`˛ˇˇˇ(SbÑ·Ç        h`˛ˇˇˇêa∏T  ‘T  (§b          Ωe       k   –      0T`    Qd      $a.toString aâ*  û*  Iëìe         l   —      0Ta¥`p  ≠
©	a        Dyd    ≥   Ÿ   Ÿ     \u`*   ô
`    Lc               Rb^)K   //  (Rh¬¢   tpc.googlesyndication.com    Rf¬¯   /sodar/62bHydCX.htmlIïôq	˘ReÜ5…7   type_error:ConstQ:RdÈ‰î   createPolicyR&ßÑÍ	   goog#html   (∞b         RdÇF
   createHTML  CRdä:¯Ü   createScriptCReJD'4   createScriptURL C›	·	Â	Sb
 Ä         ¨`¶ˇ (ëAmEH          }  %ƒ√(¬*¡¿ÛkÛÚ8ıÙ√(¬*¡¿ÛkÛÚ8ıÙ√(¬*¡¿ÛkÛÚ8ıÙı˘«∆/˘	p˜ù?˜1˘≈(tˆ¯ıù /ˆ√(oÙù/ˆ√)oÙù/ˆé	:ı«˜R∆çB ¯˘'°w«
ƒ/ı
∆õg/˜õaˇı/˜√¡Ä)¿5Ò5Ò!5Ò#aÙ˜ÚÒ%«é6√ÜÙƒ™ıÙÙ
 ¬/Û'õÙ
 ¡/Ú'¡/Ú)¬¿/Ò+¿`ÛÚÒ-Ù¯%''«õ/¯/ƒ`ı¯˘1é˘»+ƒ-¬ı˘ÙkıÙ3≠`˛ˇˇˇ(SbÑ„Ç         l`˛ˇˇˇóa^U  ¸X  ì0§j5       ìÄÄÄ"¿Z ±ÄX P ìÄÄ
† 
Ä  Ωe        m   “      0T`    ]aî,  „,  ¸d	       ƒY·Y
       ì(ëe         n   ”      D0T`    í±aÔ,  O-  îd	       ¨ZÕZ       ñïëe        p   ‘      D0T`    ua_-  /  êïëe         r   ’      0T`    óa/  ó/  ëïΩe         s   ÷      0T`    óa£/  ⁄/  ìïíe        t   ◊      0Tl¥`Ñ   ≠
)
a        Dyd       3   ô      u`   ReÊ $7   contentWindow   Re™´
¶   contentDocument Rd>±.È   parentWindowÚ5Sb
 Ä         ¨`¶ˇ (s(          ˇˆ/  »ö(/õ/«õ/¯ö/¯é!∆é∆˜˘˘˘≠ƒÜı≈™ˆıı≠  `˛ˇˇˇ(SbÑ„Ç        Ù`˛ˇˇˇíaÃ_  .a  ë§c
       P   Ωe       u   ÿ      0T`    ≠aß0  w1  ñëîe        v   Ÿ      0T`    ï A£aÜ1  ä1   A£ëîe         w   ⁄      0T`    ïQc      B.next  a§1  ∞1  Iëîe         x   €      0T`    ïQb      B.oaaÂ1  Ù1  Iëîe         y   ‹      0T`    Ua2  2  ¸d
       ˜d∆e      ê(îe        z   ›      D0T`    ïÖa¸2  f3  ìíîe        |   ﬁ      0T`    óÖar3  ±3  ëd
       çg¶g   ¿  îíΩe        }   ﬂ      D0T`    ó‡aΩ3  K4  ëd
       Êg¡h   Ä  ñíïe           ‡      D0T`    ó=aW4  ≠4  ëd
       ài£i   ¿  óíïe        Å   ·      D0T`     §aº4  Ê4   §íïe        É   ‚      0T`    êQc      E.next  aı5  |7  Iíïe         Ñ   „      0T`    ùañ7  Î9   ¸f       √o—o  ÁoÈs
       í(ïe        Ö   ‰      ÄD0T`    ëIa:  û:  ìd       ﬁtÊt      Iîïe         à   Â      D0TL¥`B   ≠
·
a        Dy`    u`   Rc⁄*”P   passive Rcn&w   capture k          õ/  õ?»c˘õé	/öé≠   `˛ˇˇˇ(SbÑ„Ç        X`˛ˇˇˇDaVu  ∂u  î§b       P Ωe       ä   ó      0TLï`F   ña        Dê`    ë`   ·k(   (       /  õ/  »@ƒdıƒ¯˜ˆ^˘¯≠ `˛ˇˇˇ(SbÑ„Ç        I`˛ˇˇˇña‘u  Lv  (ìb       @ îe       ã   Ê      0TL¥`F   ≠
!a        Dy`    u`   ¡k(   (       /  õ/  »@ƒdıƒ¯˜ˆ^˘¯≠ `˛ˇˇˇ(SbÑ„Ç        `˛ˇˇˇïadv  Ëv  ó§b       @ Ωe       å   Á      0T`    UaÑ;  ˇ;  ë(óe        ç   Ë      0T`    ê’aû<  n=  ìíóe        é   È      0T`    êåa~=  œ=  îíóe        è   Í      0T`    êHa€=  >  ïíóe        ê   Î      0T`    êëam>  á>  ñíóe        ë   Ï      0T`    êPaì>  ¿>  óíΩe        í   Ì      0T`    Iaÿ>  Q?  ±(êe         ì   ò      0TP¥`J   ≠
ua        Dy`    u`   ë; RÈl          ˘°
é˘»/˘  »õ/˘õ/˘«_¯˘é≠   `˛ˇˇˇ(SbÑ„Ç         \`˛ˇˇˇDa∏~  @  ì§b       @ Ωe        î   ô      0Tpî`ä   ïëa        Dó`    ,ê`   Rc6IZ   label   µ©Rc˙/˛d   durationRcäø™™   slotId  Rc˛≤F%   taskId   ‚	 ¬	Rcõ„˘   uniqueIdt           M«c¯ öL«c¯»4 4˘44
≈4ˆ4!≈/ˆ∆_˜ˆ4≠   `˛ˇˇˇ(SbÑ·Ç        4`˛ˇˇˇóa`  pÄ  (íe           `   ìe       ï   Ó      0T¿¥`.  ≠
¡a        D(yh@      h   Q        (   Q     0u`   IqA	R∫’†   hashSb
 Ä         Å´`¶ˇ ê r€Re*/õ   \bdeid=([\d,]+) Sb
 Ä         Å´`¶ˇ ê ÃRb‰    1337§0          P»õëKüp %Kˇ˜ »ˇˆ
ƒ/ı ƒ/ıƒ/ı»éƒÜı≈™ˆıı
 √/Ù√/Ù»ı˘õ /˘
≈|  √`ˆ˘Ù«õ	1¯é %Ké≈Üˆ∆™˜ˆˆK«/¯{ù∆/¯≈	√`ˆ¯Ùr˜»˘≠ `˛ˇˇˇ(SbÑ„Ç         I`˛ˇˇˇDaÅ  ¥Ç  ê§e       P P ì 
ÄÄ Ωe        ñ   Ô      0Têë`Ã   íÒa        Dî`    (ï`    Å¶(R$& Ó'   google_js_reporting_queue   $R ﬁ‰ÑD   google_measure_js_timing ‚	 ¬	 A¶|0          !  »4˘˜ö
4˜«˘õ/˘˘˜ö	4˜
/˘4/˘«Q≈cˆ˜ö¯ú¯é≈!√/Ùƒ_ıÙqˆ4˜≠  `˛ˇˇˇ(SbÑ·Ç         Rb≤ò†   Jb  `˛ˇˇˇaŒÇ  ÜÑ  ( ñf       L†Ä) @ @ Q   óe        ó         0T`    Qd   
   Jb.disable  aaB  æB  Iìóe         ò   Ò      0T`    î¥aŒB  IC  ïìóe        ô   Ú      0TÄ¥`¨   ≠
-a        Dy`    $u`    A¶RcÚÏ~Í   goog_   ° Å™±Rc&êu   _start  RbÏ¬   markx          /  ö≠N»˘¯˜k˘¯»/:˘»:˘»/:˘
»:˘OõQ»c˘õO«/¯»`˘¯≠  `˛ˇˇˇ(SbÑ·Ç        I`˛ˇˇˇQc      Jb.starta Ü  ™á  (§d       P  !@ Ωe       ö   Û      0T∏¥`  ≠
Ya        Dy`    8u`    A¶©•=° Å™±RbBWaÅ   _endE Å¶ï ≤…ú          /  õà/  ùÄM∆c˜¯öL∆c˜∆/;˜4¯	«/:¯«:¯«/